// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/script.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScriptConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScriptConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScriptConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScriptConfigMultiError, or
// nil if none found.
func (m *ScriptConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ScriptConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ScriptConfigValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ScriptConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(m.GetMainPlots()) < 1 {
		err := ScriptConfigValidationError{
			field:  "MainPlots",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]int32, len(m.GetMainPlots()))
		i := 0
		for key := range m.GetMainPlots() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMainPlots()[key]
			_ = val

			if val := key; val < 1000 || val >= 2000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("MainPlots[%v]", key),
					reason: "value must be inside range [1000, 2000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("MainPlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("MainPlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("MainPlots[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetSubPlots()))
		i := 0
		for key := range m.GetSubPlots() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSubPlots()[key]
			_ = val

			if val := key; val < 2000 || val >= 3000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("SubPlots[%v]", key),
					reason: "value must be inside range [2000, 3000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("SubPlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("SubPlots[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("SubPlots[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetRoles()))
		i := 0
		for key := range m.GetRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRoles()[key]
			_ = val

			if val := key; val < 3000 || val >= 4000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("Roles[%v]", key),
					reason: "value must be inside range [3000, 4000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Roles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Roles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("Roles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetIncidents()))
		i := 0
		for key := range m.GetIncidents() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetIncidents()[key]
			_ = val

			if val := key; val < 4000 || val >= 5000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("Incidents[%v]", key),
					reason: "value must be inside range [4000, 5000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Incidents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Incidents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("Incidents[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetCharacters()))
		i := 0
		for key := range m.GetCharacters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCharacters()[key]
			_ = val

			if val := key; val < 5000 || val >= 6000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("Characters[%v]", key),
					reason: "value must be inside range [5000, 6000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("Characters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetMastermindCards()))
		i := 0
		for key := range m.GetMastermindCards() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMastermindCards()[key]
			_ = val

			if val := key; val < 6000 || val >= 7000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("MastermindCards[%v]", key),
					reason: "value must be inside range [6000, 7000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("MastermindCards[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("MastermindCards[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("MastermindCards[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetProtagonistCards()))
		i := 0
		for key := range m.GetProtagonistCards() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProtagonistCards()[key]
			_ = val

			if val := key; val < 7000 || val >= 8000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("ProtagonistCards[%v]", key),
					reason: "value must be inside range [7000, 8000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("ProtagonistCards[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("ProtagonistCards[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("ProtagonistCards[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetScriptModels()))
		i := 0
		for key := range m.GetScriptModels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetScriptModels()[key]
			_ = val

			if val := key; val < 8000 || val >= 9000 {
				err := ScriptConfigValidationError{
					field:  fmt.Sprintf("ScriptModels[%v]", key),
					reason: "value must be inside range [8000, 9000)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("ScriptModels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptConfigValidationError{
							field:  fmt.Sprintf("ScriptModels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptConfigValidationError{
						field:  fmt.Sprintf("ScriptModels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ScriptConfigMultiError(errors)
	}

	return nil
}

// ScriptConfigMultiError is an error wrapping multiple validation errors
// returned by ScriptConfig.ValidateAll() if the designated constraints aren't met.
type ScriptConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScriptConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScriptConfigMultiError) AllErrors() []error { return m }

// ScriptConfigValidationError is the validation error returned by
// ScriptConfig.Validate if the designated constraints aren't met.
type ScriptConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptConfigValidationError) ErrorName() string { return "ScriptConfigValidationError" }

// Error satisfies the builtin error interface
func (e ScriptConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptConfigValidationError{}

// Validate checks the field values on DifficultySet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DifficultySet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DifficultySet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DifficultySetMultiError, or
// nil if none found.
func (m *DifficultySet) ValidateAll() error {
	return m.validate(true)
}

func (m *DifficultySet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfLoops

	// no validation rules for Difficulty

	if len(errors) > 0 {
		return DifficultySetMultiError(errors)
	}

	return nil
}

// DifficultySetMultiError is an error wrapping multiple validation errors
// returned by DifficultySet.ValidateAll() if the designated constraints
// aren't met.
type DifficultySetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DifficultySetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DifficultySetMultiError) AllErrors() []error { return m }

// DifficultySetValidationError is the validation error returned by
// DifficultySet.Validate if the designated constraints aren't met.
type DifficultySetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DifficultySetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DifficultySetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DifficultySetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DifficultySetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DifficultySetValidationError) ErrorName() string { return "DifficultySetValidationError" }

// Error satisfies the builtin error interface
func (e DifficultySetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDifficultySet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DifficultySetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DifficultySetValidationError{}

// Validate checks the field values on IncidentInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IncidentInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncidentInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncidentInstanceMultiError, or nil if none found.
func (m *IncidentInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *IncidentInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	// no validation rules for Incident

	// no validation rules for Culprit

	if len(errors) > 0 {
		return IncidentInstanceMultiError(errors)
	}

	return nil
}

// IncidentInstanceMultiError is an error wrapping multiple validation errors
// returned by IncidentInstance.ValidateAll() if the designated constraints
// aren't met.
type IncidentInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncidentInstanceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncidentInstanceMultiError) AllErrors() []error { return m }

// IncidentInstanceValidationError is the validation error returned by
// IncidentInstance.Validate if the designated constraints aren't met.
type IncidentInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncidentInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncidentInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncidentInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncidentInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncidentInstanceValidationError) ErrorName() string { return "IncidentInstanceValidationError" }

// Error satisfies the builtin error interface
func (e IncidentInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncidentInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncidentInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncidentInstanceValidationError{}

// Validate checks the field values on CastRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CastRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CastRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CastRoleMultiError, or nil
// if none found.
func (m *CastRole) ValidateAll() error {
	return m.validate(true)
}

func (m *CastRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for ExtraInfo

	if len(errors) > 0 {
		return CastRoleMultiError(errors)
	}

	return nil
}

// CastRoleMultiError is an error wrapping multiple validation errors returned
// by CastRole.ValidateAll() if the designated constraints aren't met.
type CastRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CastRoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CastRoleMultiError) AllErrors() []error { return m }

// CastRoleValidationError is the validation error returned by
// CastRole.Validate if the designated constraints aren't met.
type CastRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CastRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CastRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CastRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CastRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CastRoleValidationError) ErrorName() string { return "CastRoleValidationError" }

// Error satisfies the builtin error interface
func (e CastRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCastRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CastRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CastRoleValidationError{}

// Validate checks the field values on CastAssignment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CastAssignment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CastAssignment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CastAssignmentMultiError,
// or nil if none found.
func (m *CastAssignment) ValidateAll() error {
	return m.validate(true)
}

func (m *CastAssignment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Assignment.(type) {
	case *CastAssignment_RoleName:
		if v == nil {
			err := CastAssignmentValidationError{
				field:  "Assignment",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for RoleName
	case *CastAssignment_RoleWithExtra:
		if v == nil {
			err := CastAssignmentValidationError{
				field:  "Assignment",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRoleWithExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CastAssignmentValidationError{
						field:  "RoleWithExtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CastAssignmentValidationError{
						field:  "RoleWithExtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRoleWithExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CastAssignmentValidationError{
					field:  "RoleWithExtra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CastAssignmentMultiError(errors)
	}

	return nil
}

// CastAssignmentMultiError is an error wrapping multiple validation errors
// returned by CastAssignment.ValidateAll() if the designated constraints
// aren't met.
type CastAssignmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CastAssignmentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CastAssignmentMultiError) AllErrors() []error { return m }

// CastAssignmentValidationError is the validation error returned by
// CastAssignment.Validate if the designated constraints aren't met.
type CastAssignmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CastAssignmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CastAssignmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CastAssignmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CastAssignmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CastAssignmentValidationError) ErrorName() string { return "CastAssignmentValidationError" }

// Error satisfies the builtin error interface
func (e CastAssignmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCastAssignment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CastAssignmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CastAssignmentValidationError{}

// Validate checks the field values on ScriptMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScriptMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScriptMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScriptMetadataMultiError,
// or nil if none found.
func (m *ScriptMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ScriptMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := ScriptMetadataValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		err := ScriptMetadataValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TragedySet

	if m.GetDaysPerLoop() <= 0 {
		err := ScriptMetadataValidationError{
			field:  "DaysPerLoop",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDifficultySets()) < 1 {
		err := ScriptMetadataValidationError{
			field:  "DifficultySets",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDifficultySets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScriptMetadataValidationError{
						field:  fmt.Sprintf("DifficultySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScriptMetadataValidationError{
						field:  fmt.Sprintf("DifficultySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScriptMetadataValidationError{
					field:  fmt.Sprintf("DifficultySets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetMainPlot()) < 1 {
		err := ScriptMetadataValidationError{
			field:  "MainPlot",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCast()) < 1 {
		err := ScriptMetadataValidationError{
			field:  "Cast",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetCast()))
		i := 0
		for key := range m.GetCast() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCast()[key]
			_ = val

			// no validation rules for Cast[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ScriptMetadataValidationError{
							field:  fmt.Sprintf("Cast[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ScriptMetadataValidationError{
							field:  fmt.Sprintf("Cast[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ScriptMetadataValidationError{
						field:  fmt.Sprintf("Cast[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetIncidents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScriptMetadataValidationError{
						field:  fmt.Sprintf("Incidents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScriptMetadataValidationError{
						field:  fmt.Sprintf("Incidents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScriptMetadataValidationError{
					field:  fmt.Sprintf("Incidents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for VictoryConditions

	// no validation rules for Story

	// no validation rules for MastermindHints

	// no validation rules for Description

	// no validation rules for Source

	if len(errors) > 0 {
		return ScriptMetadataMultiError(errors)
	}

	return nil
}

// ScriptMetadataMultiError is an error wrapping multiple validation errors
// returned by ScriptMetadata.ValidateAll() if the designated constraints
// aren't met.
type ScriptMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScriptMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScriptMetadataMultiError) AllErrors() []error { return m }

// ScriptMetadataValidationError is the validation error returned by
// ScriptMetadata.Validate if the designated constraints aren't met.
type ScriptMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptMetadataValidationError) ErrorName() string { return "ScriptMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ScriptMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptMetadataValidationError{}

// Validate checks the field values on ScriptModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScriptModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScriptModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScriptModelMultiError, or
// nil if none found.
func (m *ScriptModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ScriptModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ScriptModelValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrivateConfig() == nil {
		err := ScriptModelValidationError{
			field:  "PrivateConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrivateConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "PrivateConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "PrivateConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScriptModelValidationError{
				field:  "PrivateConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPublicConfig() == nil {
		err := ScriptModelValidationError{
			field:  "PublicConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublicConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "PublicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "PublicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScriptModelValidationError{
				field:  "PublicConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMetadata() == nil {
		err := ScriptModelValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScriptModelValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScriptModelValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScriptModelMultiError(errors)
	}

	return nil
}

// ScriptModelMultiError is an error wrapping multiple validation errors
// returned by ScriptModel.ValidateAll() if the designated constraints aren't met.
type ScriptModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScriptModelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScriptModelMultiError) AllErrors() []error { return m }

// ScriptModelValidationError is the validation error returned by
// ScriptModel.Validate if the designated constraints aren't met.
type ScriptModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptModelValidationError) ErrorName() string { return "ScriptModelValidationError" }

// Error satisfies the builtin error interface
func (e ScriptModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptModelValidationError{}

// Validate checks the field values on PrivateConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrivateConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrivateConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrivateConfigMultiError, or
// nil if none found.
func (m *PrivateConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PrivateConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMainPlotId() <= 0 {
		err := PrivateConfigValidationError{
			field:  "MainPlotId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSubPlotsIds()) < 1 {
		err := PrivateConfigValidationError{
			field:  "SubPlotsIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCharactersIds()) < 1 {
		err := PrivateConfigValidationError{
			field:  "CharactersIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIncidentIds()) < 1 {
		err := PrivateConfigValidationError{
			field:  "IncidentIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleAssignments()) < 1 {
		err := PrivateConfigValidationError{
			field:  "RoleAssignments",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrivateConfigMultiError(errors)
	}

	return nil
}

// PrivateConfigMultiError is an error wrapping multiple validation errors
// returned by PrivateConfig.ValidateAll() if the designated constraints
// aren't met.
type PrivateConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrivateConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrivateConfigMultiError) AllErrors() []error { return m }

// PrivateConfigValidationError is the validation error returned by
// PrivateConfig.Validate if the designated constraints aren't met.
type PrivateConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrivateConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrivateConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrivateConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrivateConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrivateConfigValidationError) ErrorName() string { return "PrivateConfigValidationError" }

// Error satisfies the builtin error interface
func (e PrivateConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrivateConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrivateConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrivateConfigValidationError{}

// Validate checks the field values on PublicConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicConfigMultiError, or
// nil if none found.
func (m *PublicConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetScriptConfigId() <= 0 {
		err := PublicConfigValidationError{
			field:  "ScriptConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLoopCount() <= 0 {
		err := PublicConfigValidationError{
			field:  "LoopCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDaysPerLoop() <= 0 {
		err := PublicConfigValidationError{
			field:  "DaysPerLoop",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CanDiscuss

	if len(m.GetScheduledIncidentIds()) < 1 {
		err := PublicConfigValidationError{
			field:  "ScheduledIncidentIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublicConfigMultiError(errors)
	}

	return nil
}

// PublicConfigMultiError is an error wrapping multiple validation errors
// returned by PublicConfig.ValidateAll() if the designated constraints aren't met.
type PublicConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicConfigMultiError) AllErrors() []error { return m }

// PublicConfigValidationError is the validation error returned by
// PublicConfig.Validate if the designated constraints aren't met.
type PublicConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicConfigValidationError) ErrorName() string { return "PublicConfigValidationError" }

// Error satisfies the builtin error interface
func (e PublicConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicConfigValidationError{}

// Validate checks the field values on RoleConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleConfigMultiError, or
// nil if none found.
func (m *RoleConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RoleConfigValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RoleConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 1 {
		err := RoleConfigValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]int32, len(m.GetAbilities()))
		i := 0
		for key := range m.GetAbilities() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAbilities()[key]
			_ = val

			// no validation rules for Abilities[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RoleConfigValidationError{
							field:  fmt.Sprintf("Abilities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RoleConfigValidationError{
							field:  fmt.Sprintf("Abilities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RoleConfigValidationError{
						field:  fmt.Sprintf("Abilities[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for GoodwillRule

	// no validation rules for CanBeInvincible

	if len(errors) > 0 {
		return RoleConfigMultiError(errors)
	}

	return nil
}

// RoleConfigMultiError is an error wrapping multiple validation errors
// returned by RoleConfig.ValidateAll() if the designated constraints aren't met.
type RoleConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleConfigMultiError) AllErrors() []error { return m }

// RoleConfigValidationError is the validation error returned by
// RoleConfig.Validate if the designated constraints aren't met.
type RoleConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleConfigValidationError) ErrorName() string { return "RoleConfigValidationError" }

// Error satisfies the builtin error interface
func (e RoleConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleConfigValidationError{}

// Validate checks the field values on PlotConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlotConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlotConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlotConfigMultiError, or
// nil if none found.
func (m *PlotConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PlotConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := PlotConfigValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PlotType

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PlotConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	{
		sorted_keys := make([]int32, len(m.GetIncidentIds()))
		i := 0
		for key := range m.GetIncidentIds() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetIncidentIds()[key]
			_ = val

			// no validation rules for IncidentIds[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PlotConfigValidationError{
							field:  fmt.Sprintf("IncidentIds[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PlotConfigValidationError{
							field:  fmt.Sprintf("IncidentIds[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PlotConfigValidationError{
						field:  fmt.Sprintf("IncidentIds[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for RoleAssignments

	if len(errors) > 0 {
		return PlotConfigMultiError(errors)
	}

	return nil
}

// PlotConfigMultiError is an error wrapping multiple validation errors
// returned by PlotConfig.ValidateAll() if the designated constraints aren't met.
type PlotConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlotConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlotConfigMultiError) AllErrors() []error { return m }

// PlotConfigValidationError is the validation error returned by
// PlotConfig.Validate if the designated constraints aren't met.
type PlotConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlotConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlotConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlotConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlotConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlotConfigValidationError) ErrorName() string { return "PlotConfigValidationError" }

// Error satisfies the builtin error interface
func (e PlotConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlotConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlotConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlotConfigValidationError{}
