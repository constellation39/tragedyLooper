// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/payload.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlayCardPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlayCardPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayCardPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayCardPayloadMultiError, or nil if none found.
func (m *PlayCardPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayCardPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for CardId

	switch v := m.Target.(type) {
	case *PlayCardPayload_TargetCharacterId:
		if v == nil {
			err := PlayCardPayloadValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TargetCharacterId
	case *PlayCardPayload_TargetLocation:
		if v == nil {
			err := PlayCardPayloadValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TargetLocation
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PlayCardPayloadMultiError(errors)
	}

	return nil
}

// PlayCardPayloadMultiError is an error wrapping multiple validation errors
// returned by PlayCardPayload.ValidateAll() if the designated constraints
// aren't met.
type PlayCardPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayCardPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayCardPayloadMultiError) AllErrors() []error { return m }

// PlayCardPayloadValidationError is the validation error returned by
// PlayCardPayload.Validate if the designated constraints aren't met.
type PlayCardPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayCardPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayCardPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayCardPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayCardPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayCardPayloadValidationError) ErrorName() string { return "PlayCardPayloadValidationError" }

// Error satisfies the builtin error interface
func (e PlayCardPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayCardPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayCardPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayCardPayloadValidationError{}

// Validate checks the field values on UseAbilityPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UseAbilityPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseAbilityPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseAbilityPayloadMultiError, or nil if none found.
func (m *UseAbilityPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *UseAbilityPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for CharacterId

	// no validation rules for AbilityId

	switch v := m.Target.(type) {
	case *UseAbilityPayload_TargetCharacterId:
		if v == nil {
			err := UseAbilityPayloadValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TargetCharacterId
	case *UseAbilityPayload_TargetLocation:
		if v == nil {
			err := UseAbilityPayloadValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TargetLocation
	case *UseAbilityPayload_TargetIncidentId:
		if v == nil {
			err := UseAbilityPayloadValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TargetIncidentId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UseAbilityPayloadMultiError(errors)
	}

	return nil
}

// UseAbilityPayloadMultiError is an error wrapping multiple validation errors
// returned by UseAbilityPayload.ValidateAll() if the designated constraints
// aren't met.
type UseAbilityPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseAbilityPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseAbilityPayloadMultiError) AllErrors() []error { return m }

// UseAbilityPayloadValidationError is the validation error returned by
// UseAbilityPayload.Validate if the designated constraints aren't met.
type UseAbilityPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseAbilityPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseAbilityPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseAbilityPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseAbilityPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseAbilityPayloadValidationError) ErrorName() string {
	return "UseAbilityPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e UseAbilityPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseAbilityPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseAbilityPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseAbilityPayloadValidationError{}

// Validate checks the field values on MakeGuessPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MakeGuessPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeGuessPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeGuessPayloadMultiError, or nil if none found.
func (m *MakeGuessPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeGuessPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for GuessedRoles

	if len(errors) > 0 {
		return MakeGuessPayloadMultiError(errors)
	}

	return nil
}

// MakeGuessPayloadMultiError is an error wrapping multiple validation errors
// returned by MakeGuessPayload.ValidateAll() if the designated constraints
// aren't met.
type MakeGuessPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeGuessPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeGuessPayloadMultiError) AllErrors() []error { return m }

// MakeGuessPayloadValidationError is the validation error returned by
// MakeGuessPayload.Validate if the designated constraints aren't met.
type MakeGuessPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeGuessPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeGuessPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeGuessPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeGuessPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeGuessPayloadValidationError) ErrorName() string { return "MakeGuessPayloadValidationError" }

// Error satisfies the builtin error interface
func (e MakeGuessPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeGuessPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeGuessPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeGuessPayloadValidationError{}

// Validate checks the field values on ChooseOptionPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChooseOptionPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChooseOptionPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChooseOptionPayloadMultiError, or nil if none found.
func (m *ChooseOptionPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *ChooseOptionPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for CharacterId

	// no validation rules for ChosenOptionId

	if len(errors) > 0 {
		return ChooseOptionPayloadMultiError(errors)
	}

	return nil
}

// ChooseOptionPayloadMultiError is an error wrapping multiple validation
// errors returned by ChooseOptionPayload.ValidateAll() if the designated
// constraints aren't met.
type ChooseOptionPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChooseOptionPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChooseOptionPayloadMultiError) AllErrors() []error { return m }

// ChooseOptionPayloadValidationError is the validation error returned by
// ChooseOptionPayload.Validate if the designated constraints aren't met.
type ChooseOptionPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChooseOptionPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChooseOptionPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChooseOptionPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChooseOptionPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChooseOptionPayloadValidationError) ErrorName() string {
	return "ChooseOptionPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e ChooseOptionPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChooseOptionPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChooseOptionPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChooseOptionPayloadValidationError{}

// Validate checks the field values on PassTurnAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PassTurnAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassTurnAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PassTurnActionMultiError,
// or nil if none found.
func (m *PassTurnAction) ValidateAll() error {
	return m.validate(true)
}

func (m *PassTurnAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	if len(errors) > 0 {
		return PassTurnActionMultiError(errors)
	}

	return nil
}

// PassTurnActionMultiError is an error wrapping multiple validation errors
// returned by PassTurnAction.ValidateAll() if the designated constraints
// aren't met.
type PassTurnActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassTurnActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassTurnActionMultiError) AllErrors() []error { return m }

// PassTurnActionValidationError is the validation error returned by
// PassTurnAction.Validate if the designated constraints aren't met.
type PassTurnActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassTurnActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassTurnActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassTurnActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassTurnActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassTurnActionValidationError) ErrorName() string { return "PassTurnActionValidationError" }

// Error satisfies the builtin error interface
func (e PassTurnActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassTurnAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassTurnActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassTurnActionValidationError{}

// Validate checks the field values on PlayerActionPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerActionPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerActionPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerActionPayloadMultiError, or nil if none found.
func (m *PlayerActionPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerActionPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Payload.(type) {
	case *PlayerActionPayload_PlayCard:
		if v == nil {
			err := PlayerActionPayloadValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlayCard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "PlayCard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "PlayCard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlayCard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerActionPayloadValidationError{
					field:  "PlayCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlayerActionPayload_UseAbility:
		if v == nil {
			err := PlayerActionPayloadValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUseAbility()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "UseAbility",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "UseAbility",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUseAbility()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerActionPayloadValidationError{
					field:  "UseAbility",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlayerActionPayload_MakeGuess:
		if v == nil {
			err := PlayerActionPayloadValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMakeGuess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "MakeGuess",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "MakeGuess",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMakeGuess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerActionPayloadValidationError{
					field:  "MakeGuess",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlayerActionPayload_ChooseOption:
		if v == nil {
			err := PlayerActionPayloadValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChooseOption()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "ChooseOption",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "ChooseOption",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChooseOption()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerActionPayloadValidationError{
					field:  "ChooseOption",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlayerActionPayload_PassTurn:
		if v == nil {
			err := PlayerActionPayloadValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPassTurn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "PassTurn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerActionPayloadValidationError{
						field:  "PassTurn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPassTurn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerActionPayloadValidationError{
					field:  "PassTurn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PlayerActionPayloadMultiError(errors)
	}

	return nil
}

// PlayerActionPayloadMultiError is an error wrapping multiple validation
// errors returned by PlayerActionPayload.ValidateAll() if the designated
// constraints aren't met.
type PlayerActionPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerActionPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerActionPayloadMultiError) AllErrors() []error { return m }

// PlayerActionPayloadValidationError is the validation error returned by
// PlayerActionPayload.Validate if the designated constraints aren't met.
type PlayerActionPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerActionPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerActionPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerActionPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerActionPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerActionPayloadValidationError) ErrorName() string {
	return "PlayerActionPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerActionPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerActionPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerActionPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerActionPayloadValidationError{}
