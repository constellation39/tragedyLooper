// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/character.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CharacterConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CharacterConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterConfigMultiError, or nil if none found.
func (m *CharacterConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for StatLimits

	for idx, item := range m.GetAbilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterConfigValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterConfigValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterConfigValidationError{
					field:  fmt.Sprintf("Abilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterConfigValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterConfigValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterConfigValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Description

	// no validation rules for InitialLocation

	if len(errors) > 0 {
		return CharacterConfigMultiError(errors)
	}

	return nil
}

// CharacterConfigMultiError is an error wrapping multiple validation errors
// returned by CharacterConfig.ValidateAll() if the designated constraints
// aren't met.
type CharacterConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterConfigMultiError) AllErrors() []error { return m }

// CharacterConfigValidationError is the validation error returned by
// CharacterConfig.Validate if the designated constraints aren't met.
type CharacterConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterConfigValidationError) ErrorName() string { return "CharacterConfigValidationError" }

// Error satisfies the builtin error interface
func (e CharacterConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterConfigValidationError{}

// Validate checks the field values on Character with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Character) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Character with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CharacterMultiError, or nil
// if none found.
func (m *Character) ValidateAll() error {
	return m.validate(true)
}

func (m *Character) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CharacterValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CharacterValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CharacterValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CurrentLocation

	// no validation rules for Stats

	// no validation rules for HiddenRoleId

	for idx, item := range m.GetAbilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterValidationError{
					field:  fmt.Sprintf("Abilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsAlive

	// no validation rules for InPanicMode

	if len(errors) > 0 {
		return CharacterMultiError(errors)
	}

	return nil
}

// CharacterMultiError is an error wrapping multiple validation errors returned
// by Character.ValidateAll() if the designated constraints aren't met.
type CharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterMultiError) AllErrors() []error { return m }

// CharacterValidationError is the validation error returned by
// Character.Validate if the designated constraints aren't met.
type CharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterValidationError) ErrorName() string { return "CharacterValidationError" }

// Error satisfies the builtin error interface
func (e CharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterValidationError{}

// Validate checks the field values on CharacterRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CharacterRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CharacterRuleMultiError, or
// nil if none found.
func (m *CharacterRule) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Trigger

	switch v := m.Effect.(type) {
	case *CharacterRule_TurfSelectionEffect:
		if v == nil {
			err := CharacterRuleValidationError{
				field:  "Effect",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTurfSelectionEffect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "TurfSelectionEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "TurfSelectionEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTurfSelectionEffect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterRuleValidationError{
					field:  "TurfSelectionEffect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CharacterRule_DelayedEntryEffect:
		if v == nil {
			err := CharacterRuleValidationError{
				field:  "Effect",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelayedEntryEffect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "DelayedEntryEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "DelayedEntryEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelayedEntryEffect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterRuleValidationError{
					field:  "DelayedEntryEffect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CharacterRule_SpecialMovementRule:
		if v == nil {
			err := CharacterRuleValidationError{
				field:  "Effect",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSpecialMovementRule()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "SpecialMovementRule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterRuleValidationError{
						field:  "SpecialMovementRule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSpecialMovementRule()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterRuleValidationError{
					field:  "SpecialMovementRule",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CharacterRuleMultiError(errors)
	}

	return nil
}

// CharacterRuleMultiError is an error wrapping multiple validation errors
// returned by CharacterRule.ValidateAll() if the designated constraints
// aren't met.
type CharacterRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterRuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterRuleMultiError) AllErrors() []error { return m }

// CharacterRuleValidationError is the validation error returned by
// CharacterRule.Validate if the designated constraints aren't met.
type CharacterRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterRuleValidationError) ErrorName() string { return "CharacterRuleValidationError" }

// Error satisfies the builtin error interface
func (e CharacterRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterRuleValidationError{}

// Validate checks the field values on TurfSelectionEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TurfSelectionEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TurfSelectionEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TurfSelectionEffectMultiError, or nil if none found.
func (m *TurfSelectionEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *TurfSelectionEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prompt

	if len(errors) > 0 {
		return TurfSelectionEffectMultiError(errors)
	}

	return nil
}

// TurfSelectionEffectMultiError is an error wrapping multiple validation
// errors returned by TurfSelectionEffect.ValidateAll() if the designated
// constraints aren't met.
type TurfSelectionEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TurfSelectionEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TurfSelectionEffectMultiError) AllErrors() []error { return m }

// TurfSelectionEffectValidationError is the validation error returned by
// TurfSelectionEffect.Validate if the designated constraints aren't met.
type TurfSelectionEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TurfSelectionEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TurfSelectionEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TurfSelectionEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TurfSelectionEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TurfSelectionEffectValidationError) ErrorName() string {
	return "TurfSelectionEffectValidationError"
}

// Error satisfies the builtin error interface
func (e TurfSelectionEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTurfSelectionEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TurfSelectionEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TurfSelectionEffectValidationError{}

// Validate checks the field values on DelayedEntryEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelayedEntryEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelayedEntryEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelayedEntryEffectMultiError, or nil if none found.
func (m *DelayedEntryEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *DelayedEntryEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DayOfEntry

	// no validation rules for EntryLocation

	if len(errors) > 0 {
		return DelayedEntryEffectMultiError(errors)
	}

	return nil
}

// DelayedEntryEffectMultiError is an error wrapping multiple validation errors
// returned by DelayedEntryEffect.ValidateAll() if the designated constraints
// aren't met.
type DelayedEntryEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelayedEntryEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelayedEntryEffectMultiError) AllErrors() []error { return m }

// DelayedEntryEffectValidationError is the validation error returned by
// DelayedEntryEffect.Validate if the designated constraints aren't met.
type DelayedEntryEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelayedEntryEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelayedEntryEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelayedEntryEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelayedEntryEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelayedEntryEffectValidationError) ErrorName() string {
	return "DelayedEntryEffectValidationError"
}

// Error satisfies the builtin error interface
func (e DelayedEntryEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelayedEntryEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelayedEntryEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelayedEntryEffectValidationError{}

// Validate checks the field values on SpecialMovementRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecialMovementRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialMovementRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecialMovementRuleMultiError, or nil if none found.
func (m *SpecialMovementRule) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialMovementRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return SpecialMovementRuleMultiError(errors)
	}

	return nil
}

// SpecialMovementRuleMultiError is an error wrapping multiple validation
// errors returned by SpecialMovementRule.ValidateAll() if the designated
// constraints aren't met.
type SpecialMovementRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialMovementRuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialMovementRuleMultiError) AllErrors() []error { return m }

// SpecialMovementRuleValidationError is the validation error returned by
// SpecialMovementRule.Validate if the designated constraints aren't met.
type SpecialMovementRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialMovementRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialMovementRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialMovementRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialMovementRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialMovementRuleValidationError) ErrorName() string {
	return "SpecialMovementRuleValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialMovementRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialMovementRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialMovementRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialMovementRuleValidationError{}
