// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/effect.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Effect with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Effect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Effect with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EffectMultiError, or nil if none found.
func (m *Effect) ValidateAll() error {
	return m.validate(true)
}

func (m *Effect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.EffectType.(type) {
	case *Effect_AdjustStat:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAdjustStat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "AdjustStat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "AdjustStat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdjustStat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "AdjustStat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_MoveCharacter:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMoveCharacter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "MoveCharacter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "MoveCharacter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMoveCharacter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "MoveCharacter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_Forbid:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetForbid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "Forbid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "Forbid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetForbid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "Forbid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_GrantAbility:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGrantAbility()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "GrantAbility",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "GrantAbility",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGrantAbility()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "GrantAbility",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_RevealRole:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRevealRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "RevealRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "RevealRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRevealRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "RevealRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_ChangeRole:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChangeRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "ChangeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "ChangeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChangeRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "ChangeRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_TriggerIncident:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTriggerIncident()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "TriggerIncident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "TriggerIncident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerIncident()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "TriggerIncident",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_EndGame:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEndGame()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "EndGame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "EndGame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndGame()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "EndGame",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_AddTrait:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAddTrait()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "AddTrait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "AddTrait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAddTrait()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "AddTrait",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_RemoveTrait:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoveTrait()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "RemoveTrait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "RemoveTrait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoveTrait()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "RemoveTrait",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Effect_CompoundEffect:
		if v == nil {
			err := EffectValidationError{
				field:  "EffectType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCompoundEffect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "CompoundEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EffectValidationError{
						field:  "CompoundEffect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompoundEffect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EffectValidationError{
					field:  "CompoundEffect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EffectMultiError(errors)
	}

	return nil
}

// EffectMultiError is an error wrapping multiple validation errors returned by
// Effect.ValidateAll() if the designated constraints aren't met.
type EffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EffectMultiError) AllErrors() []error { return m }

// EffectValidationError is the validation error returned by Effect.Validate if
// the designated constraints aren't met.
type EffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EffectValidationError) ErrorName() string { return "EffectValidationError" }

// Error satisfies the builtin error interface
func (e EffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EffectValidationError{}

// Validate checks the field values on CompoundEffect with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompoundEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompoundEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompoundEffectMultiError,
// or nil if none found.
func (m *CompoundEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *CompoundEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetSubEffects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompoundEffectValidationError{
						field:  fmt.Sprintf("SubEffects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompoundEffectValidationError{
						field:  fmt.Sprintf("SubEffects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompoundEffectValidationError{
					field:  fmt.Sprintf("SubEffects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompoundEffectMultiError(errors)
	}

	return nil
}

// CompoundEffectMultiError is an error wrapping multiple validation errors
// returned by CompoundEffect.ValidateAll() if the designated constraints
// aren't met.
type CompoundEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompoundEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompoundEffectMultiError) AllErrors() []error { return m }

// CompoundEffectValidationError is the validation error returned by
// CompoundEffect.Validate if the designated constraints aren't met.
type CompoundEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompoundEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompoundEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompoundEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompoundEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompoundEffectValidationError) ErrorName() string { return "CompoundEffectValidationError" }

// Error satisfies the builtin error interface
func (e CompoundEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompoundEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompoundEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompoundEffectValidationError{}

// Validate checks the field values on AdjustStatEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdjustStatEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdjustStatEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdjustStatEffectMultiError, or nil if none found.
func (m *AdjustStatEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *AdjustStatEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdjustStatEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdjustStatEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdjustStatEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatType

	// no validation rules for Amount

	if len(errors) > 0 {
		return AdjustStatEffectMultiError(errors)
	}

	return nil
}

// AdjustStatEffectMultiError is an error wrapping multiple validation errors
// returned by AdjustStatEffect.ValidateAll() if the designated constraints
// aren't met.
type AdjustStatEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdjustStatEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdjustStatEffectMultiError) AllErrors() []error { return m }

// AdjustStatEffectValidationError is the validation error returned by
// AdjustStatEffect.Validate if the designated constraints aren't met.
type AdjustStatEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdjustStatEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdjustStatEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdjustStatEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdjustStatEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdjustStatEffectValidationError) ErrorName() string { return "AdjustStatEffectValidationError" }

// Error satisfies the builtin error interface
func (e AdjustStatEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdjustStatEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdjustStatEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdjustStatEffectValidationError{}

// Validate checks the field values on MoveCharacterEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MoveCharacterEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveCharacterEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveCharacterEffectMultiError, or nil if none found.
func (m *MoveCharacterEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveCharacterEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveCharacterEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveCharacterEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveCharacterEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Destination

	if len(errors) > 0 {
		return MoveCharacterEffectMultiError(errors)
	}

	return nil
}

// MoveCharacterEffectMultiError is an error wrapping multiple validation
// errors returned by MoveCharacterEffect.ValidateAll() if the designated
// constraints aren't met.
type MoveCharacterEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveCharacterEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveCharacterEffectMultiError) AllErrors() []error { return m }

// MoveCharacterEffectValidationError is the validation error returned by
// MoveCharacterEffect.Validate if the designated constraints aren't met.
type MoveCharacterEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveCharacterEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveCharacterEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveCharacterEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveCharacterEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveCharacterEffectValidationError) ErrorName() string {
	return "MoveCharacterEffectValidationError"
}

// Error satisfies the builtin error interface
func (e MoveCharacterEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveCharacterEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveCharacterEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveCharacterEffectValidationError{}

// Validate checks the field values on ForbidEffect with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForbidEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForbidEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForbidEffectMultiError, or
// nil if none found.
func (m *ForbidEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *ForbidEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForbidEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForbidEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForbidEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ForbidType

	if len(errors) > 0 {
		return ForbidEffectMultiError(errors)
	}

	return nil
}

// ForbidEffectMultiError is an error wrapping multiple validation errors
// returned by ForbidEffect.ValidateAll() if the designated constraints aren't met.
type ForbidEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForbidEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForbidEffectMultiError) AllErrors() []error { return m }

// ForbidEffectValidationError is the validation error returned by
// ForbidEffect.Validate if the designated constraints aren't met.
type ForbidEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForbidEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForbidEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForbidEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForbidEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForbidEffectValidationError) ErrorName() string { return "ForbidEffectValidationError" }

// Error satisfies the builtin error interface
func (e ForbidEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForbidEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForbidEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForbidEffectValidationError{}

// Validate checks the field values on GrantAbilityEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantAbilityEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAbilityEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantAbilityEffectMultiError, or nil if none found.
func (m *GrantAbilityEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAbilityEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantAbilityEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantAbilityEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantAbilityEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AbilityId

	// no validation rules for IsTemporary

	if len(errors) > 0 {
		return GrantAbilityEffectMultiError(errors)
	}

	return nil
}

// GrantAbilityEffectMultiError is an error wrapping multiple validation errors
// returned by GrantAbilityEffect.ValidateAll() if the designated constraints
// aren't met.
type GrantAbilityEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAbilityEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAbilityEffectMultiError) AllErrors() []error { return m }

// GrantAbilityEffectValidationError is the validation error returned by
// GrantAbilityEffect.Validate if the designated constraints aren't met.
type GrantAbilityEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAbilityEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAbilityEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAbilityEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAbilityEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAbilityEffectValidationError) ErrorName() string {
	return "GrantAbilityEffectValidationError"
}

// Error satisfies the builtin error interface
func (e GrantAbilityEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAbilityEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAbilityEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAbilityEffectValidationError{}

// Validate checks the field values on RevealRoleEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RevealRoleEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevealRoleEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevealRoleEffectMultiError, or nil if none found.
func (m *RevealRoleEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *RevealRoleEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevealRoleEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevealRoleEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevealRoleEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevealRoleEffectMultiError(errors)
	}

	return nil
}

// RevealRoleEffectMultiError is an error wrapping multiple validation errors
// returned by RevealRoleEffect.ValidateAll() if the designated constraints
// aren't met.
type RevealRoleEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevealRoleEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevealRoleEffectMultiError) AllErrors() []error { return m }

// RevealRoleEffectValidationError is the validation error returned by
// RevealRoleEffect.Validate if the designated constraints aren't met.
type RevealRoleEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevealRoleEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevealRoleEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevealRoleEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevealRoleEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevealRoleEffectValidationError) ErrorName() string { return "RevealRoleEffectValidationError" }

// Error satisfies the builtin error interface
func (e RevealRoleEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevealRoleEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevealRoleEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevealRoleEffectValidationError{}

// Validate checks the field values on ChangeRoleEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeRoleEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRoleEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRoleEffectMultiError, or nil if none found.
func (m *ChangeRoleEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRoleEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeRoleEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeRoleEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeRoleEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewRole

	if len(errors) > 0 {
		return ChangeRoleEffectMultiError(errors)
	}

	return nil
}

// ChangeRoleEffectMultiError is an error wrapping multiple validation errors
// returned by ChangeRoleEffect.ValidateAll() if the designated constraints
// aren't met.
type ChangeRoleEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRoleEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRoleEffectMultiError) AllErrors() []error { return m }

// ChangeRoleEffectValidationError is the validation error returned by
// ChangeRoleEffect.Validate if the designated constraints aren't met.
type ChangeRoleEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRoleEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRoleEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRoleEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRoleEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRoleEffectValidationError) ErrorName() string { return "ChangeRoleEffectValidationError" }

// Error satisfies the builtin error interface
func (e ChangeRoleEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRoleEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRoleEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRoleEffectValidationError{}

// Validate checks the field values on TriggerIncidentEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerIncidentEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerIncidentEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerIncidentEffectMultiError, or nil if none found.
func (m *TriggerIncidentEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerIncidentEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncidentId

	if len(errors) > 0 {
		return TriggerIncidentEffectMultiError(errors)
	}

	return nil
}

// TriggerIncidentEffectMultiError is an error wrapping multiple validation
// errors returned by TriggerIncidentEffect.ValidateAll() if the designated
// constraints aren't met.
type TriggerIncidentEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerIncidentEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerIncidentEffectMultiError) AllErrors() []error { return m }

// TriggerIncidentEffectValidationError is the validation error returned by
// TriggerIncidentEffect.Validate if the designated constraints aren't met.
type TriggerIncidentEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerIncidentEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerIncidentEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerIncidentEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerIncidentEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerIncidentEffectValidationError) ErrorName() string {
	return "TriggerIncidentEffectValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerIncidentEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerIncidentEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerIncidentEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerIncidentEffectValidationError{}

// Validate checks the field values on EndGameEffect with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndGameEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndGameEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndGameEffectMultiError, or
// nil if none found.
func (m *EndGameEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *EndGameEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Winner

	// no validation rules for Reason

	if len(errors) > 0 {
		return EndGameEffectMultiError(errors)
	}

	return nil
}

// EndGameEffectMultiError is an error wrapping multiple validation errors
// returned by EndGameEffect.ValidateAll() if the designated constraints
// aren't met.
type EndGameEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndGameEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndGameEffectMultiError) AllErrors() []error { return m }

// EndGameEffectValidationError is the validation error returned by
// EndGameEffect.Validate if the designated constraints aren't met.
type EndGameEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndGameEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndGameEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndGameEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndGameEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndGameEffectValidationError) ErrorName() string { return "EndGameEffectValidationError" }

// Error satisfies the builtin error interface
func (e EndGameEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndGameEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndGameEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndGameEffectValidationError{}

// Validate checks the field values on AddTraitEffect with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddTraitEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTraitEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddTraitEffectMultiError,
// or nil if none found.
func (m *AddTraitEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTraitEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddTraitEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddTraitEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddTraitEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Trait

	if len(errors) > 0 {
		return AddTraitEffectMultiError(errors)
	}

	return nil
}

// AddTraitEffectMultiError is an error wrapping multiple validation errors
// returned by AddTraitEffect.ValidateAll() if the designated constraints
// aren't met.
type AddTraitEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTraitEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTraitEffectMultiError) AllErrors() []error { return m }

// AddTraitEffectValidationError is the validation error returned by
// AddTraitEffect.Validate if the designated constraints aren't met.
type AddTraitEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTraitEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTraitEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTraitEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTraitEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTraitEffectValidationError) ErrorName() string { return "AddTraitEffectValidationError" }

// Error satisfies the builtin error interface
func (e AddTraitEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTraitEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTraitEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTraitEffectValidationError{}

// Validate checks the field values on RemoveTraitEffect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveTraitEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTraitEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTraitEffectMultiError, or nil if none found.
func (m *RemoveTraitEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTraitEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveTraitEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveTraitEffectValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveTraitEffectValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Trait

	if len(errors) > 0 {
		return RemoveTraitEffectMultiError(errors)
	}

	return nil
}

// RemoveTraitEffectMultiError is an error wrapping multiple validation errors
// returned by RemoveTraitEffect.ValidateAll() if the designated constraints
// aren't met.
type RemoveTraitEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTraitEffectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTraitEffectMultiError) AllErrors() []error { return m }

// RemoveTraitEffectValidationError is the validation error returned by
// RemoveTraitEffect.Validate if the designated constraints aren't met.
type RemoveTraitEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTraitEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTraitEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTraitEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTraitEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTraitEffectValidationError) ErrorName() string {
	return "RemoveTraitEffectValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTraitEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTraitEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTraitEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTraitEffectValidationError{}
