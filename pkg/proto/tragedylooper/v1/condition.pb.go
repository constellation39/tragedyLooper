// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tragedylooper/v1/condition.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The operator to use when combining conditions.
type CompoundCondition_Operator int32

const (
	// Unspecified operator.
	CompoundCondition_OPERATOR_UNSPECIFIED CompoundCondition_Operator = 0
	// The logical AND operator.
	CompoundCondition_OPERATOR_AND CompoundCondition_Operator = 1
	// The logical OR operator.
	CompoundCondition_OPERATOR_OR CompoundCondition_Operator = 2
	// The logical NOT operator.
	CompoundCondition_OPERATOR_NOT CompoundCondition_Operator = 3
)

// Enum value maps for CompoundCondition_Operator.
var (
	CompoundCondition_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_AND",
		2: "OPERATOR_OR",
		3: "OPERATOR_NOT",
	}
	CompoundCondition_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_AND":         1,
		"OPERATOR_OR":          2,
		"OPERATOR_NOT":         3,
	}
)

func (x CompoundCondition_Operator) Enum() *CompoundCondition_Operator {
	p := new(CompoundCondition_Operator)
	*p = x
	return p
}

func (x CompoundCondition_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundCondition_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_tragedylooper_v1_condition_proto_enumTypes[0].Descriptor()
}

func (CompoundCondition_Operator) Type() protoreflect.EnumType {
	return &file_tragedylooper_v1_condition_proto_enumTypes[0]
}

func (x CompoundCondition_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompoundCondition_Operator.Descriptor instead.
func (CompoundCondition_Operator) EnumDescriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{4, 0}
}

// Condition defines a condition for triggering rules, events, and effects.
// It uses a oneof to ensure that only one type of condition can be set at a time.
// For logical negation, use a CompoundCondition with the NOT operator.
type Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the condition.
	//
	// Types that are valid to be assigned to ConditionType:
	//
	//	*Condition_StatCondition
	//	*Condition_LocationCondition
	//	*Condition_RoleCondition
	//	*Condition_TraitCondition
	//	*Condition_DayCondition
	//	*Condition_PlayerCondition
	//	*Condition_CompoundCondition
	//	*Condition_PhaseCondition
	//	*Condition_EventHistoryCondition
	//	*Condition_LocationCharacterCountCondition
	ConditionType isCondition_ConditionType `protobuf_oneof:"condition_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetConditionType() isCondition_ConditionType {
	if x != nil {
		return x.ConditionType
	}
	return nil
}

func (x *Condition) GetStatCondition() *StatCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_StatCondition); ok {
			return x.StatCondition
		}
	}
	return nil
}

func (x *Condition) GetLocationCondition() *LocationCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_LocationCondition); ok {
			return x.LocationCondition
		}
	}
	return nil
}

func (x *Condition) GetRoleCondition() *RoleCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_RoleCondition); ok {
			return x.RoleCondition
		}
	}
	return nil
}

func (x *Condition) GetTraitCondition() *TraitCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_TraitCondition); ok {
			return x.TraitCondition
		}
	}
	return nil
}

func (x *Condition) GetDayCondition() *DayCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_DayCondition); ok {
			return x.DayCondition
		}
	}
	return nil
}

func (x *Condition) GetPlayerCondition() *PlayerCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_PlayerCondition); ok {
			return x.PlayerCondition
		}
	}
	return nil
}

func (x *Condition) GetCompoundCondition() *CompoundCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_CompoundCondition); ok {
			return x.CompoundCondition
		}
	}
	return nil
}

func (x *Condition) GetPhaseCondition() *PhaseCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_PhaseCondition); ok {
			return x.PhaseCondition
		}
	}
	return nil
}

func (x *Condition) GetEventHistoryCondition() *EventHistoryCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_EventHistoryCondition); ok {
			return x.EventHistoryCondition
		}
	}
	return nil
}

func (x *Condition) GetLocationCharacterCountCondition() *LocationCharacterCountCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_LocationCharacterCountCondition); ok {
			return x.LocationCharacterCountCondition
		}
	}
	return nil
}

type isCondition_ConditionType interface {
	isCondition_ConditionType()
}

type Condition_StatCondition struct {
	// A stat condition.
	StatCondition *StatCondition `protobuf:"bytes,1,opt,name=stat_condition,json=statCondition,proto3,oneof"`
}

type Condition_LocationCondition struct {
	// A location condition.
	LocationCondition *LocationCondition `protobuf:"bytes,2,opt,name=location_condition,json=locationCondition,proto3,oneof"`
}

type Condition_RoleCondition struct {
	// A role condition.
	RoleCondition *RoleCondition `protobuf:"bytes,3,opt,name=role_condition,json=roleCondition,proto3,oneof"`
}

type Condition_TraitCondition struct {
	// A trait condition.
	TraitCondition *TraitCondition `protobuf:"bytes,4,opt,name=trait_condition,json=traitCondition,proto3,oneof"`
}

type Condition_DayCondition struct {
	// A day condition.
	DayCondition *DayCondition `protobuf:"bytes,5,opt,name=day_condition,json=dayCondition,proto3,oneof"`
}

type Condition_PlayerCondition struct {
	// A player condition.
	PlayerCondition *PlayerCondition `protobuf:"bytes,6,opt,name=player_condition,json=playerCondition,proto3,oneof"`
}

type Condition_CompoundCondition struct {
	// A compound condition (AND/OR/NOT).
	CompoundCondition *CompoundCondition `protobuf:"bytes,7,opt,name=compound_condition,json=compoundCondition,proto3,oneof"`
}

type Condition_PhaseCondition struct {
	// A phase condition.
	PhaseCondition *PhaseCondition `protobuf:"bytes,8,opt,name=phase_condition,json=phaseCondition,proto3,oneof"`
}

type Condition_EventHistoryCondition struct {
	// An event history condition.
	EventHistoryCondition *EventHistoryCondition `protobuf:"bytes,9,opt,name=event_history_condition,json=eventHistoryCondition,proto3,oneof"`
}

type Condition_LocationCharacterCountCondition struct {
	// A location character count condition.
	LocationCharacterCountCondition *LocationCharacterCountCondition `protobuf:"bytes,11,opt,name=location_character_count_condition,json=locationCharacterCountCondition,proto3,oneof"`
}

func (*Condition_StatCondition) isCondition_ConditionType() {}

func (*Condition_LocationCondition) isCondition_ConditionType() {}

func (*Condition_RoleCondition) isCondition_ConditionType() {}

func (*Condition_TraitCondition) isCondition_ConditionType() {}

func (*Condition_DayCondition) isCondition_ConditionType() {}

func (*Condition_PlayerCondition) isCondition_ConditionType() {}

func (*Condition_CompoundCondition) isCondition_ConditionType() {}

func (*Condition_PhaseCondition) isCondition_ConditionType() {}

func (*Condition_EventHistoryCondition) isCondition_ConditionType() {}

func (*Condition_LocationCharacterCountCondition) isCondition_ConditionType() {}

// EventHistoryCondition defines a condition based on past game events.
type EventHistoryCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of event to look for.
	EventType GameEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=tragedylooper.v1.GameEventType" json:"event_type,omitempty"`
	// How many days into the past to look. 0 means today, 1 means today and yesterday, etc.
	LookbackDays int32 `protobuf:"varint,2,opt,name=lookback_days,json=lookbackDays,proto3" json:"lookback_days,omitempty"`
	// Optional: Further filter by the character involved in the event.
	EventTarget *TargetSelector `protobuf:"bytes,3,opt,name=event_target,json=eventTarget,proto3" json:"event_target,omitempty"`
	// The number of times the event must have occurred.
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The comparator for the count.
	Comparator Comparator `protobuf:"varint,5,opt,name=comparator,proto3,enum=tragedylooper.v1.Comparator" json:"comparator,omitempty"`
	// Optional: A filter for the event payload.
	//
	// Types that are valid to be assigned to EventFilter:
	//
	//	*EventHistoryCondition_StatAdjustedEventFilter
	EventFilter   isEventHistoryCondition_EventFilter `protobuf_oneof:"event_filter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventHistoryCondition) Reset() {
	*x = EventHistoryCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHistoryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHistoryCondition) ProtoMessage() {}

func (x *EventHistoryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHistoryCondition.ProtoReflect.Descriptor instead.
func (*EventHistoryCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{1}
}

func (x *EventHistoryCondition) GetEventType() GameEventType {
	if x != nil {
		return x.EventType
	}
	return GameEventType_GAME_EVENT_TYPE_UNSPECIFIED
}

func (x *EventHistoryCondition) GetLookbackDays() int32 {
	if x != nil {
		return x.LookbackDays
	}
	return 0
}

func (x *EventHistoryCondition) GetEventTarget() *TargetSelector {
	if x != nil {
		return x.EventTarget
	}
	return nil
}

func (x *EventHistoryCondition) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventHistoryCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

func (x *EventHistoryCondition) GetEventFilter() isEventHistoryCondition_EventFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

func (x *EventHistoryCondition) GetStatAdjustedEventFilter() *StatAdjustedEventFilter {
	if x != nil {
		if x, ok := x.EventFilter.(*EventHistoryCondition_StatAdjustedEventFilter); ok {
			return x.StatAdjustedEventFilter
		}
	}
	return nil
}

type isEventHistoryCondition_EventFilter interface {
	isEventHistoryCondition_EventFilter()
}

type EventHistoryCondition_StatAdjustedEventFilter struct {
	StatAdjustedEventFilter *StatAdjustedEventFilter `protobuf:"bytes,6,opt,name=stat_adjusted_event_filter,json=statAdjustedEventFilter,proto3,oneof"`
}

func (*EventHistoryCondition_StatAdjustedEventFilter) isEventHistoryCondition_EventFilter() {}

// StatAdjustedEventFilter provides a filter for StatAdjustedEvent.
type StatAdjustedEventFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: The stat type to match.
	StatType *StatType `protobuf:"varint,1,opt,name=stat_type,json=statType,proto3,enum=tragedylooper.v1.StatType,oneof" json:"stat_type,omitempty"`
	// Optional: The amount to compare against.
	Amount *int32 `protobuf:"varint,2,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	// Optional: The comparator for the amount.
	AmountComparator *Comparator `protobuf:"varint,3,opt,name=amount_comparator,json=amountComparator,proto3,enum=tragedylooper.v1.Comparator,oneof" json:"amount_comparator,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StatAdjustedEventFilter) Reset() {
	*x = StatAdjustedEventFilter{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatAdjustedEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatAdjustedEventFilter) ProtoMessage() {}

func (x *StatAdjustedEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatAdjustedEventFilter.ProtoReflect.Descriptor instead.
func (*StatAdjustedEventFilter) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{2}
}

func (x *StatAdjustedEventFilter) GetStatType() StatType {
	if x != nil && x.StatType != nil {
		return *x.StatType
	}
	return StatType_STAT_TYPE_UNSPECIFIED
}

func (x *StatAdjustedEventFilter) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *StatAdjustedEventFilter) GetAmountComparator() Comparator {
	if x != nil && x.AmountComparator != nil {
		return *x.AmountComparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

// PhaseCondition defines a condition based on the current game phase.
type PhaseCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The comparator to use.
	Comparator Comparator `protobuf:"varint,1,opt,name=comparator,proto3,enum=tragedylooper.v1.Comparator" json:"comparator,omitempty"`
	// The target game phase.
	Phase         GamePhase `protobuf:"varint,2,opt,name=phase,proto3,enum=tragedylooper.v1.GamePhase" json:"phase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhaseCondition) Reset() {
	*x = PhaseCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhaseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseCondition) ProtoMessage() {}

func (x *PhaseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseCondition.ProtoReflect.Descriptor instead.
func (*PhaseCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{3}
}

func (x *PhaseCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

func (x *PhaseCondition) GetPhase() GamePhase {
	if x != nil {
		return x.Phase
	}
	return GamePhase_GAME_PHASE_UNSPECIFIED
}

// CompoundCondition defines a combination of multiple conditions.
// For NOT, provide exactly one sub-condition.
type CompoundCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The logical operator to use.
	Operator CompoundCondition_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=tragedylooper.v1.CompoundCondition_Operator" json:"operator,omitempty"`
	// A list of sub-conditions.
	SubConditions []*Condition `protobuf:"bytes,2,rep,name=sub_conditions,json=subConditions,proto3" json:"sub_conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompoundCondition) Reset() {
	*x = CompoundCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompoundCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCondition) ProtoMessage() {}

func (x *CompoundCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCondition.ProtoReflect.Descriptor instead.
func (*CompoundCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{4}
}

func (x *CompoundCondition) GetOperator() CompoundCondition_Operator {
	if x != nil {
		return x.Operator
	}
	return CompoundCondition_OPERATOR_UNSPECIFIED
}

func (x *CompoundCondition) GetSubConditions() []*Condition {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

// StatCondition defines a condition based on a character's stats.
type StatCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target character selector.
	Target *TargetSelector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The type of stat to check.
	StatType StatType `protobuf:"varint,2,opt,name=stat_type,json=statType,proto3,enum=tragedylooper.v1.StatType" json:"stat_type,omitempty"`
	// The comparator to use.
	Comparator Comparator `protobuf:"varint,3,opt,name=comparator,proto3,enum=tragedylooper.v1.Comparator" json:"comparator,omitempty"`
	// The value to compare against.
	Value int32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// Optional: A second target to compare against.
	// If set, the condition compares the stat of 'target' with the stat of 'target_to_compare'.
	TargetToCompare *TargetSelector `protobuf:"bytes,5,opt,name=target_to_compare,json=targetToCompare,proto3" json:"target_to_compare,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StatCondition) Reset() {
	*x = StatCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatCondition) ProtoMessage() {}

func (x *StatCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatCondition.ProtoReflect.Descriptor instead.
func (*StatCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{5}
}

func (x *StatCondition) GetTarget() *TargetSelector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StatCondition) GetStatType() StatType {
	if x != nil {
		return x.StatType
	}
	return StatType_STAT_TYPE_UNSPECIFIED
}

func (x *StatCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

func (x *StatCondition) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StatCondition) GetTargetToCompare() *TargetSelector {
	if x != nil {
		return x.TargetToCompare
	}
	return nil
}

// LocationCondition defines a condition that checks if a character is at a specific location.
// To check if a character is NOT at a location, use a CompoundCondition with the NOT operator.
type LocationCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target character selector.
	Target *TargetSelector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The target location.
	Location      LocationType `protobuf:"varint,2,opt,name=location,proto3,enum=tragedylooper.v1.LocationType" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCondition) Reset() {
	*x = LocationCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCondition) ProtoMessage() {}

func (x *LocationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCondition.ProtoReflect.Descriptor instead.
func (*LocationCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{6}
}

func (x *LocationCondition) GetTarget() *TargetSelector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *LocationCondition) GetLocation() LocationType {
	if x != nil {
		return x.Location
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

// LocationCharacterCountCondition defines a condition based on the number of characters at a location.
type LocationCharacterCountCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target location.
	Location LocationType `protobuf:"varint,1,opt,name=location,proto3,enum=tragedylooper.v1.LocationType" json:"location,omitempty"`
	// The comparator to use.
	Comparator Comparator `protobuf:"varint,2,opt,name=comparator,proto3,enum=tragedylooper.v1.Comparator" json:"comparator,omitempty"`
	// The number of characters to compare against.
	Count         int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCharacterCountCondition) Reset() {
	*x = LocationCharacterCountCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCharacterCountCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCharacterCountCondition) ProtoMessage() {}

func (x *LocationCharacterCountCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCharacterCountCondition.ProtoReflect.Descriptor instead.
func (*LocationCharacterCountCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{7}
}

func (x *LocationCharacterCountCondition) GetLocation() LocationType {
	if x != nil {
		return x.Location
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (x *LocationCharacterCountCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

func (x *LocationCharacterCountCondition) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// RoleCondition defines a condition based on a character's role.
// To check if a character does NOT have a role, use a CompoundCondition with the NOT operator.
type RoleCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target character selector.
	Target *TargetSelector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The role to check.
	RoleId        int32 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleCondition) Reset() {
	*x = RoleCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleCondition) ProtoMessage() {}

func (x *RoleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleCondition.ProtoReflect.Descriptor instead.
func (*RoleCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{8}
}

func (x *RoleCondition) GetTarget() *TargetSelector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RoleCondition) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// TraitCondition defines a condition based on a character's traits.
// To check if a character does NOT have a trait, use a CompoundCondition with the NOT operator.
type TraitCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target character selector.
	Target *TargetSelector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The target trait.
	Trait         string `protobuf:"bytes,2,opt,name=trait,proto3" json:"trait,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraitCondition) Reset() {
	*x = TraitCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraitCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraitCondition) ProtoMessage() {}

func (x *TraitCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraitCondition.ProtoReflect.Descriptor instead.
func (*TraitCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{9}
}

func (x *TraitCondition) GetTarget() *TargetSelector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *TraitCondition) GetTrait() string {
	if x != nil {
		return x.Trait
	}
	return ""
}

// DayCondition defines a condition based on the current day.
type DayCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The comparator to use.
	Comparator Comparator `protobuf:"varint,1,opt,name=comparator,proto3,enum=tragedylooper.v1.Comparator" json:"comparator,omitempty"`
	// The target day.
	Day           int32 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DayCondition) Reset() {
	*x = DayCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DayCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayCondition) ProtoMessage() {}

func (x *DayCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayCondition.ProtoReflect.Descriptor instead.
func (*DayCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{10}
}

func (x *DayCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_UNSPECIFIED
}

func (x *DayCondition) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

// PlayerCondition defines a condition based on a player's state.
type PlayerCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target player role.
	PlayerRole    PlayerRole `protobuf:"varint,1,opt,name=player_role,json=playerRole,proto3,enum=tragedylooper.v1.PlayerRole" json:"player_role,omitempty"` // Extensible: e.g., check if the player has used a certain card.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerCondition) Reset() {
	*x = PlayerCondition{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCondition) ProtoMessage() {}

func (x *PlayerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCondition.ProtoReflect.Descriptor instead.
func (*PlayerCondition) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerCondition) GetPlayerRole() PlayerRole {
	if x != nil {
		return x.PlayerRole
	}
	return PlayerRole_PLAYER_ROLE_UNSPECIFIED
}

// TargetSelector defines a dynamic target for conditions or effects.
// It uses a oneof to ensure that only one type of selector can be set at a time.
// When a selector can potentially match multiple characters (e.g., all_characters_at_location),
// and it is used in a context that evaluates a condition (like StatCondition),
// the condition is considered true if *any* of the matched characters satisfy the condition.
type TargetSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Selector:
	//
	//	*TargetSelector_SpecificCharacter
	//	*TargetSelector_TriggeringCharacter
	//	*TargetSelector_Culprit
	//	*TargetSelector_Victim
	//	*TargetSelector_CharacterWithRoleId
	//	*TargetSelector_AllCharactersAtLocation
	//	*TargetSelector_ActionUser
	//	*TargetSelector_ActionTarget
	//	*TargetSelector_AllCharacters
	Selector      isTargetSelector_Selector `protobuf_oneof:"selector"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetSelector) Reset() {
	*x = TargetSelector{}
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSelector) ProtoMessage() {}

func (x *TargetSelector) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_condition_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSelector.ProtoReflect.Descriptor instead.
func (*TargetSelector) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_condition_proto_rawDescGZIP(), []int{12}
}

func (x *TargetSelector) GetSelector() isTargetSelector_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *TargetSelector) GetSpecificCharacter() int32 {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_SpecificCharacter); ok {
			return x.SpecificCharacter
		}
	}
	return 0
}

func (x *TargetSelector) GetTriggeringCharacter() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_TriggeringCharacter); ok {
			return x.TriggeringCharacter
		}
	}
	return nil
}

func (x *TargetSelector) GetCulprit() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_Culprit); ok {
			return x.Culprit
		}
	}
	return nil
}

func (x *TargetSelector) GetVictim() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_Victim); ok {
			return x.Victim
		}
	}
	return nil
}

func (x *TargetSelector) GetCharacterWithRoleId() int32 {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_CharacterWithRoleId); ok {
			return x.CharacterWithRoleId
		}
	}
	return 0
}

func (x *TargetSelector) GetAllCharactersAtLocation() LocationType {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_AllCharactersAtLocation); ok {
			return x.AllCharactersAtLocation
		}
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (x *TargetSelector) GetActionUser() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_ActionUser); ok {
			return x.ActionUser
		}
	}
	return nil
}

func (x *TargetSelector) GetActionTarget() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_ActionTarget); ok {
			return x.ActionTarget
		}
	}
	return nil
}

func (x *TargetSelector) GetAllCharacters() *Empty {
	if x != nil {
		if x, ok := x.Selector.(*TargetSelector_AllCharacters); ok {
			return x.AllCharacters
		}
	}
	return nil
}

type isTargetSelector_Selector interface {
	isTargetSelector_Selector()
}

type TargetSelector_SpecificCharacter struct {
	// A specific character by ID.
	SpecificCharacter int32 `protobuf:"varint,1,opt,name=specific_character,json=specificCharacter,proto3,oneof"`
}

type TargetSelector_TriggeringCharacter struct {
	// The character that triggered the event.
	TriggeringCharacter *Empty `protobuf:"bytes,2,opt,name=triggering_character,json=triggeringCharacter,proto3,oneof"`
}

type TargetSelector_Culprit struct {
	// The culprit of the event.
	Culprit *Empty `protobuf:"bytes,3,opt,name=culprit,proto3,oneof"`
}

type TargetSelector_Victim struct {
	// The victim of the event.
	Victim *Empty `protobuf:"bytes,4,opt,name=victim,proto3,oneof"`
}

type TargetSelector_CharacterWithRoleId struct {
	// Any character with a specific role.
	CharacterWithRoleId int32 `protobuf:"varint,5,opt,name=character_with_role_id,json=characterWithRoleId,proto3,oneof"`
}

type TargetSelector_AllCharactersAtLocation struct {
	// All characters at a specific location.
	AllCharactersAtLocation LocationType `protobuf:"varint,6,opt,name=all_characters_at_location,json=allCharactersAtLocation,proto3,enum=tragedylooper.v1.LocationType,oneof"`
}

type TargetSelector_ActionUser struct {
	// The user of the action (card or ability).
	ActionUser *Empty `protobuf:"bytes,7,opt,name=action_user,json=actionUser,proto3,oneof"`
}

type TargetSelector_ActionTarget struct {
	// The target of the action (card or ability).
	ActionTarget *Empty `protobuf:"bytes,8,opt,name=action_target,json=actionTarget,proto3,oneof"`
}

type TargetSelector_AllCharacters struct {
	// All characters.
	AllCharacters *Empty `protobuf:"bytes,9,opt,name=all_characters,json=allCharacters,proto3,oneof"`
}

func (*TargetSelector_SpecificCharacter) isTargetSelector_Selector() {}

func (*TargetSelector_TriggeringCharacter) isTargetSelector_Selector() {}

func (*TargetSelector_Culprit) isTargetSelector_Selector() {}

func (*TargetSelector_Victim) isTargetSelector_Selector() {}

func (*TargetSelector_CharacterWithRoleId) isTargetSelector_Selector() {}

func (*TargetSelector_AllCharactersAtLocation) isTargetSelector_Selector() {}

func (*TargetSelector_ActionUser) isTargetSelector_Selector() {}

func (*TargetSelector_ActionTarget) isTargetSelector_Selector() {}

func (*TargetSelector_AllCharacters) isTargetSelector_Selector() {}

var File_tragedylooper_v1_condition_proto protoreflect.FileDescriptor

const file_tragedylooper_v1_condition_proto_rawDesc = "" +
	"\n" +
	" tragedylooper/v1/condition.proto\x12\x10tragedylooper.v1\x1a\x1dtragedylooper/v1/common.proto\x1a\x1ctragedylooper/v1/enums.proto\"\xf4\x06\n" +
	"\tCondition\x12H\n" +
	"\x0estat_condition\x18\x01 \x01(\v2\x1f.tragedylooper.v1.StatConditionH\x00R\rstatCondition\x12T\n" +
	"\x12location_condition\x18\x02 \x01(\v2#.tragedylooper.v1.LocationConditionH\x00R\x11locationCondition\x12H\n" +
	"\x0erole_condition\x18\x03 \x01(\v2\x1f.tragedylooper.v1.RoleConditionH\x00R\rroleCondition\x12K\n" +
	"\x0ftrait_condition\x18\x04 \x01(\v2 .tragedylooper.v1.TraitConditionH\x00R\x0etraitCondition\x12E\n" +
	"\rday_condition\x18\x05 \x01(\v2\x1e.tragedylooper.v1.DayConditionH\x00R\fdayCondition\x12N\n" +
	"\x10player_condition\x18\x06 \x01(\v2!.tragedylooper.v1.PlayerConditionH\x00R\x0fplayerCondition\x12T\n" +
	"\x12compound_condition\x18\a \x01(\v2#.tragedylooper.v1.CompoundConditionH\x00R\x11compoundCondition\x12K\n" +
	"\x0fphase_condition\x18\b \x01(\v2 .tragedylooper.v1.PhaseConditionH\x00R\x0ephaseCondition\x12a\n" +
	"\x17event_history_condition\x18\t \x01(\v2'.tragedylooper.v1.EventHistoryConditionH\x00R\x15eventHistoryCondition\x12\x80\x01\n" +
	"\"location_character_count_condition\x18\v \x01(\v21.tragedylooper.v1.LocationCharacterCountConditionH\x00R\x1flocationCharacterCountConditionB\x10\n" +
	"\x0econdition_type\"\x8f\x03\n" +
	"\x15EventHistoryCondition\x12>\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2\x1f.tragedylooper.v1.GameEventTypeR\teventType\x12#\n" +
	"\rlookback_days\x18\x02 \x01(\x05R\flookbackDays\x12C\n" +
	"\fevent_target\x18\x03 \x01(\v2 .tragedylooper.v1.TargetSelectorR\veventTarget\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x05R\x05count\x12<\n" +
	"\n" +
	"comparator\x18\x05 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorR\n" +
	"comparator\x12h\n" +
	"\x1astat_adjusted_event_filter\x18\x06 \x01(\v2).tragedylooper.v1.StatAdjustedEventFilterH\x00R\x17statAdjustedEventFilterB\x0e\n" +
	"\fevent_filter\"\xf3\x01\n" +
	"\x17StatAdjustedEventFilter\x12<\n" +
	"\tstat_type\x18\x01 \x01(\x0e2\x1a.tragedylooper.v1.StatTypeH\x00R\bstatType\x88\x01\x01\x12\x1b\n" +
	"\x06amount\x18\x02 \x01(\x05H\x01R\x06amount\x88\x01\x01\x12N\n" +
	"\x11amount_comparator\x18\x03 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorH\x02R\x10amountComparator\x88\x01\x01B\f\n" +
	"\n" +
	"_stat_typeB\t\n" +
	"\a_amountB\x14\n" +
	"\x12_amount_comparator\"\x81\x01\n" +
	"\x0ePhaseCondition\x12<\n" +
	"\n" +
	"comparator\x18\x01 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorR\n" +
	"comparator\x121\n" +
	"\x05phase\x18\x02 \x01(\x0e2\x1b.tragedylooper.v1.GamePhaseR\x05phase\"\xfc\x01\n" +
	"\x11CompoundCondition\x12H\n" +
	"\boperator\x18\x01 \x01(\x0e2,.tragedylooper.v1.CompoundCondition.OperatorR\boperator\x12B\n" +
	"\x0esub_conditions\x18\x02 \x03(\v2\x1b.tragedylooper.v1.ConditionR\rsubConditions\"Y\n" +
	"\bOperator\x12\x18\n" +
	"\x14OPERATOR_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fOPERATOR_AND\x10\x01\x12\x0f\n" +
	"\vOPERATOR_OR\x10\x02\x12\x10\n" +
	"\fOPERATOR_NOT\x10\x03\"\xa4\x02\n" +
	"\rStatCondition\x128\n" +
	"\x06target\x18\x01 \x01(\v2 .tragedylooper.v1.TargetSelectorR\x06target\x127\n" +
	"\tstat_type\x18\x02 \x01(\x0e2\x1a.tragedylooper.v1.StatTypeR\bstatType\x12<\n" +
	"\n" +
	"comparator\x18\x03 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorR\n" +
	"comparator\x12\x14\n" +
	"\x05value\x18\x04 \x01(\x05R\x05value\x12L\n" +
	"\x11target_to_compare\x18\x05 \x01(\v2 .tragedylooper.v1.TargetSelectorR\x0ftargetToCompare\"\x89\x01\n" +
	"\x11LocationCondition\x128\n" +
	"\x06target\x18\x01 \x01(\v2 .tragedylooper.v1.TargetSelectorR\x06target\x12:\n" +
	"\blocation\x18\x02 \x01(\x0e2\x1e.tragedylooper.v1.LocationTypeR\blocation\"\xb1\x01\n" +
	"\x1fLocationCharacterCountCondition\x12:\n" +
	"\blocation\x18\x01 \x01(\x0e2\x1e.tragedylooper.v1.LocationTypeR\blocation\x12<\n" +
	"\n" +
	"comparator\x18\x02 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorR\n" +
	"comparator\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\"b\n" +
	"\rRoleCondition\x128\n" +
	"\x06target\x18\x01 \x01(\v2 .tragedylooper.v1.TargetSelectorR\x06target\x12\x17\n" +
	"\arole_id\x18\x02 \x01(\x05R\x06roleId\"`\n" +
	"\x0eTraitCondition\x128\n" +
	"\x06target\x18\x01 \x01(\v2 .tragedylooper.v1.TargetSelectorR\x06target\x12\x14\n" +
	"\x05trait\x18\x02 \x01(\tR\x05trait\"^\n" +
	"\fDayCondition\x12<\n" +
	"\n" +
	"comparator\x18\x01 \x01(\x0e2\x1c.tragedylooper.v1.ComparatorR\n" +
	"comparator\x12\x10\n" +
	"\x03day\x18\x02 \x01(\x05R\x03day\"P\n" +
	"\x0fPlayerCondition\x12=\n" +
	"\vplayer_role\x18\x01 \x01(\x0e2\x1c.tragedylooper.v1.PlayerRoleR\n" +
	"playerRole\"\xd7\x04\n" +
	"\x0eTargetSelector\x12/\n" +
	"\x12specific_character\x18\x01 \x01(\x05H\x00R\x11specificCharacter\x12L\n" +
	"\x14triggering_character\x18\x02 \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\x13triggeringCharacter\x123\n" +
	"\aculprit\x18\x03 \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\aculprit\x121\n" +
	"\x06victim\x18\x04 \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\x06victim\x125\n" +
	"\x16character_with_role_id\x18\x05 \x01(\x05H\x00R\x13characterWithRoleId\x12]\n" +
	"\x1aall_characters_at_location\x18\x06 \x01(\x0e2\x1e.tragedylooper.v1.LocationTypeH\x00R\x17allCharactersAtLocation\x12:\n" +
	"\vaction_user\x18\a \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\n" +
	"actionUser\x12>\n" +
	"\raction_target\x18\b \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\factionTarget\x12@\n" +
	"\x0eall_characters\x18\t \x01(\v2\x17.tragedylooper.v1.EmptyH\x00R\rallCharactersB\n" +
	"\n" +
	"\bselectorB\xbe\x01\n" +
	"\x14com.tragedylooper.v1B\x0eConditionProtoP\x01Z5github.com/constellation39/tragedyLooper/pkg/proto/v1\xa2\x02\x03TXX\xaa\x02\x10Tragedylooper.V1\xca\x02\x10Tragedylooper\\V1\xe2\x02\x1cTragedylooper\\V1\\GPBMetadata\xea\x02\x11Tragedylooper::V1b\x06proto3"

var (
	file_tragedylooper_v1_condition_proto_rawDescOnce sync.Once
	file_tragedylooper_v1_condition_proto_rawDescData []byte
)

func file_tragedylooper_v1_condition_proto_rawDescGZIP() []byte {
	file_tragedylooper_v1_condition_proto_rawDescOnce.Do(func() {
		file_tragedylooper_v1_condition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tragedylooper_v1_condition_proto_rawDesc), len(file_tragedylooper_v1_condition_proto_rawDesc)))
	})
	return file_tragedylooper_v1_condition_proto_rawDescData
}

var file_tragedylooper_v1_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tragedylooper_v1_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tragedylooper_v1_condition_proto_goTypes = []any{
	(CompoundCondition_Operator)(0),         // 0: tragedylooper.v1.CompoundCondition.Operator
	(*Condition)(nil),                       // 1: tragedylooper.v1.Condition
	(*EventHistoryCondition)(nil),           // 2: tragedylooper.v1.EventHistoryCondition
	(*StatAdjustedEventFilter)(nil),         // 3: tragedylooper.v1.StatAdjustedEventFilter
	(*PhaseCondition)(nil),                  // 4: tragedylooper.v1.PhaseCondition
	(*CompoundCondition)(nil),               // 5: tragedylooper.v1.CompoundCondition
	(*StatCondition)(nil),                   // 6: tragedylooper.v1.StatCondition
	(*LocationCondition)(nil),               // 7: tragedylooper.v1.LocationCondition
	(*LocationCharacterCountCondition)(nil), // 8: tragedylooper.v1.LocationCharacterCountCondition
	(*RoleCondition)(nil),                   // 9: tragedylooper.v1.RoleCondition
	(*TraitCondition)(nil),                  // 10: tragedylooper.v1.TraitCondition
	(*DayCondition)(nil),                    // 11: tragedylooper.v1.DayCondition
	(*PlayerCondition)(nil),                 // 12: tragedylooper.v1.PlayerCondition
	(*TargetSelector)(nil),                  // 13: tragedylooper.v1.TargetSelector
	(GameEventType)(0),                      // 14: tragedylooper.v1.GameEventType
	(Comparator)(0),                         // 15: tragedylooper.v1.Comparator
	(StatType)(0),                           // 16: tragedylooper.v1.StatType
	(GamePhase)(0),                          // 17: tragedylooper.v1.GamePhase
	(LocationType)(0),                       // 18: tragedylooper.v1.LocationType
	(PlayerRole)(0),                         // 19: tragedylooper.v1.PlayerRole
	(*Empty)(nil),                           // 20: tragedylooper.v1.Empty
}
var file_tragedylooper_v1_condition_proto_depIdxs = []int32{
	6,  // 0: tragedylooper.v1.Condition.stat_condition:type_name -> tragedylooper.v1.StatCondition
	7,  // 1: tragedylooper.v1.Condition.location_condition:type_name -> tragedylooper.v1.LocationCondition
	9,  // 2: tragedylooper.v1.Condition.role_condition:type_name -> tragedylooper.v1.RoleCondition
	10, // 3: tragedylooper.v1.Condition.trait_condition:type_name -> tragedylooper.v1.TraitCondition
	11, // 4: tragedylooper.v1.Condition.day_condition:type_name -> tragedylooper.v1.DayCondition
	12, // 5: tragedylooper.v1.Condition.player_condition:type_name -> tragedylooper.v1.PlayerCondition
	5,  // 6: tragedylooper.v1.Condition.compound_condition:type_name -> tragedylooper.v1.CompoundCondition
	4,  // 7: tragedylooper.v1.Condition.phase_condition:type_name -> tragedylooper.v1.PhaseCondition
	2,  // 8: tragedylooper.v1.Condition.event_history_condition:type_name -> tragedylooper.v1.EventHistoryCondition
	8,  // 9: tragedylooper.v1.Condition.location_character_count_condition:type_name -> tragedylooper.v1.LocationCharacterCountCondition
	14, // 10: tragedylooper.v1.EventHistoryCondition.event_type:type_name -> tragedylooper.v1.GameEventType
	13, // 11: tragedylooper.v1.EventHistoryCondition.event_target:type_name -> tragedylooper.v1.TargetSelector
	15, // 12: tragedylooper.v1.EventHistoryCondition.comparator:type_name -> tragedylooper.v1.Comparator
	3,  // 13: tragedylooper.v1.EventHistoryCondition.stat_adjusted_event_filter:type_name -> tragedylooper.v1.StatAdjustedEventFilter
	16, // 14: tragedylooper.v1.StatAdjustedEventFilter.stat_type:type_name -> tragedylooper.v1.StatType
	15, // 15: tragedylooper.v1.StatAdjustedEventFilter.amount_comparator:type_name -> tragedylooper.v1.Comparator
	15, // 16: tragedylooper.v1.PhaseCondition.comparator:type_name -> tragedylooper.v1.Comparator
	17, // 17: tragedylooper.v1.PhaseCondition.phase:type_name -> tragedylooper.v1.GamePhase
	0,  // 18: tragedylooper.v1.CompoundCondition.operator:type_name -> tragedylooper.v1.CompoundCondition.Operator
	1,  // 19: tragedylooper.v1.CompoundCondition.sub_conditions:type_name -> tragedylooper.v1.Condition
	13, // 20: tragedylooper.v1.StatCondition.target:type_name -> tragedylooper.v1.TargetSelector
	16, // 21: tragedylooper.v1.StatCondition.stat_type:type_name -> tragedylooper.v1.StatType
	15, // 22: tragedylooper.v1.StatCondition.comparator:type_name -> tragedylooper.v1.Comparator
	13, // 23: tragedylooper.v1.StatCondition.target_to_compare:type_name -> tragedylooper.v1.TargetSelector
	13, // 24: tragedylooper.v1.LocationCondition.target:type_name -> tragedylooper.v1.TargetSelector
	18, // 25: tragedylooper.v1.LocationCondition.location:type_name -> tragedylooper.v1.LocationType
	18, // 26: tragedylooper.v1.LocationCharacterCountCondition.location:type_name -> tragedylooper.v1.LocationType
	15, // 27: tragedylooper.v1.LocationCharacterCountCondition.comparator:type_name -> tragedylooper.v1.Comparator
	13, // 28: tragedylooper.v1.RoleCondition.target:type_name -> tragedylooper.v1.TargetSelector
	13, // 29: tragedylooper.v1.TraitCondition.target:type_name -> tragedylooper.v1.TargetSelector
	15, // 30: tragedylooper.v1.DayCondition.comparator:type_name -> tragedylooper.v1.Comparator
	19, // 31: tragedylooper.v1.PlayerCondition.player_role:type_name -> tragedylooper.v1.PlayerRole
	20, // 32: tragedylooper.v1.TargetSelector.triggering_character:type_name -> tragedylooper.v1.Empty
	20, // 33: tragedylooper.v1.TargetSelector.culprit:type_name -> tragedylooper.v1.Empty
	20, // 34: tragedylooper.v1.TargetSelector.victim:type_name -> tragedylooper.v1.Empty
	18, // 35: tragedylooper.v1.TargetSelector.all_characters_at_location:type_name -> tragedylooper.v1.LocationType
	20, // 36: tragedylooper.v1.TargetSelector.action_user:type_name -> tragedylooper.v1.Empty
	20, // 37: tragedylooper.v1.TargetSelector.action_target:type_name -> tragedylooper.v1.Empty
	20, // 38: tragedylooper.v1.TargetSelector.all_characters:type_name -> tragedylooper.v1.Empty
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_tragedylooper_v1_condition_proto_init() }
func file_tragedylooper_v1_condition_proto_init() {
	if File_tragedylooper_v1_condition_proto != nil {
		return
	}
	file_tragedylooper_v1_common_proto_init()
	file_tragedylooper_v1_enums_proto_init()
	file_tragedylooper_v1_condition_proto_msgTypes[0].OneofWrappers = []any{
		(*Condition_StatCondition)(nil),
		(*Condition_LocationCondition)(nil),
		(*Condition_RoleCondition)(nil),
		(*Condition_TraitCondition)(nil),
		(*Condition_DayCondition)(nil),
		(*Condition_PlayerCondition)(nil),
		(*Condition_CompoundCondition)(nil),
		(*Condition_PhaseCondition)(nil),
		(*Condition_EventHistoryCondition)(nil),
		(*Condition_LocationCharacterCountCondition)(nil),
	}
	file_tragedylooper_v1_condition_proto_msgTypes[1].OneofWrappers = []any{
		(*EventHistoryCondition_StatAdjustedEventFilter)(nil),
	}
	file_tragedylooper_v1_condition_proto_msgTypes[2].OneofWrappers = []any{}
	file_tragedylooper_v1_condition_proto_msgTypes[12].OneofWrappers = []any{
		(*TargetSelector_SpecificCharacter)(nil),
		(*TargetSelector_TriggeringCharacter)(nil),
		(*TargetSelector_Culprit)(nil),
		(*TargetSelector_Victim)(nil),
		(*TargetSelector_CharacterWithRoleId)(nil),
		(*TargetSelector_AllCharactersAtLocation)(nil),
		(*TargetSelector_ActionUser)(nil),
		(*TargetSelector_ActionTarget)(nil),
		(*TargetSelector_AllCharacters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tragedylooper_v1_condition_proto_rawDesc), len(file_tragedylooper_v1_condition_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tragedylooper_v1_condition_proto_goTypes,
		DependencyIndexes: file_tragedylooper_v1_condition_proto_depIdxs,
		EnumInfos:         file_tragedylooper_v1_condition_proto_enumTypes,
		MessageInfos:      file_tragedylooper_v1_condition_proto_msgTypes,
	}.Build()
	File_tragedylooper_v1_condition_proto = out.File
	file_tragedylooper_v1_condition_proto_goTypes = nil
	file_tragedylooper_v1_condition_proto_depIdxs = nil
}
