// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/ability.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AbilityConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AbilityConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbilityConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AbilityConfigMultiError, or
// nil if none found.
func (m *AbilityConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AbilityConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for TriggerType

	if all {
		switch v := interface{}(m.GetEffect()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbilityConfigValidationError{
					field:  "Effect",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbilityConfigValidationError{
					field:  "Effect",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEffect()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbilityConfigValidationError{
				field:  "Effect",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OncePerLoop

	// no validation rules for RefusalRole

	// no validation rules for IsPassive

	// no validation rules for IsMandatory

	// no validation rules for Priority

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AbilityConfigValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AbilityConfigValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AbilityConfigValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RequiresChoice

	// no validation rules for GoodwillRank

	if len(errors) > 0 {
		return AbilityConfigMultiError(errors)
	}

	return nil
}

// AbilityConfigMultiError is an error wrapping multiple validation errors
// returned by AbilityConfig.ValidateAll() if the designated constraints
// aren't met.
type AbilityConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbilityConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbilityConfigMultiError) AllErrors() []error { return m }

// AbilityConfigValidationError is the validation error returned by
// AbilityConfig.Validate if the designated constraints aren't met.
type AbilityConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbilityConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbilityConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbilityConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbilityConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbilityConfigValidationError) ErrorName() string { return "AbilityConfigValidationError" }

// Error satisfies the builtin error interface
func (e AbilityConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbilityConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbilityConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbilityConfigValidationError{}

// Validate checks the field values on CompoundAbility with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompoundAbility) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompoundAbility with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompoundAbilityMultiError, or nil if none found.
func (m *CompoundAbility) ValidateAll() error {
	return m.validate(true)
}

func (m *CompoundAbility) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetSubAbilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompoundAbilityValidationError{
						field:  fmt.Sprintf("SubAbilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompoundAbilityValidationError{
						field:  fmt.Sprintf("SubAbilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompoundAbilityValidationError{
					field:  fmt.Sprintf("SubAbilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompoundAbilityMultiError(errors)
	}

	return nil
}

// CompoundAbilityMultiError is an error wrapping multiple validation errors
// returned by CompoundAbility.ValidateAll() if the designated constraints
// aren't met.
type CompoundAbilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompoundAbilityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompoundAbilityMultiError) AllErrors() []error { return m }

// CompoundAbilityValidationError is the validation error returned by
// CompoundAbility.Validate if the designated constraints aren't met.
type CompoundAbilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompoundAbilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompoundAbilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompoundAbilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompoundAbilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompoundAbilityValidationError) ErrorName() string { return "CompoundAbilityValidationError" }

// Error satisfies the builtin error interface
func (e CompoundAbilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompoundAbility.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompoundAbilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompoundAbilityValidationError{}

// Validate checks the field values on Ability with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ability with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AbilityMultiError, or nil if none found.
func (m *Ability) ValidateAll() error {
	return m.validate(true)
}

func (m *Ability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbilityValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbilityValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbilityValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UsedThisLoop

	// no validation rules for OwnerCharacterId

	if len(errors) > 0 {
		return AbilityMultiError(errors)
	}

	return nil
}

// AbilityMultiError is an error wrapping multiple validation errors returned
// by Ability.ValidateAll() if the designated constraints aren't met.
type AbilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbilityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbilityMultiError) AllErrors() []error { return m }

// AbilityValidationError is the validation error returned by Ability.Validate
// if the designated constraints aren't met.
type AbilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbilityValidationError) ErrorName() string { return "AbilityValidationError" }

// Error satisfies the builtin error interface
func (e AbilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbility.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbilityValidationError{}
