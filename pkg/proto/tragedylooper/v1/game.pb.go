// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tragedylooper/v1/game.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GameState represents the complete, authoritative state of a game at a specific moment.
// It is the single source of truth, intended for server-side use and persistence.
// It should not contain historical data like event logs, which should be handled separately.
type GameState struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	GameId             string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                                                                 // Unique identifier for the game session.
	Tick               int64                  `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`                                                                                                                                  // A monotonic clock representing the finest-grained unit of game time.
	CurrentLoop        int32                  `protobuf:"varint,3,opt,name=current_loop,json=currentLoop,proto3" json:"current_loop,omitempty"`                                                                                                 // The current loop number.
	DaysPerLoop        int32                  `protobuf:"varint,4,opt,name=days_per_loop,json=daysPerLoop,proto3" json:"days_per_loop,omitempty"`                                                                                               // The total number of days in a single loop.
	CurrentDay         int32                  `protobuf:"varint,5,opt,name=current_day,json=currentDay,proto3" json:"current_day,omitempty"`                                                                                                    // The current day within the loop.
	CurrentPhase       GamePhase              `protobuf:"varint,6,opt,name=current_phase,json=currentPhase,proto3,enum=tragedylooper.v1.GamePhase" json:"current_phase,omitempty"`                                                              // The current phase within the day.
	Characters         map[int32]*Character   `protobuf:"bytes,7,rep,name=characters,proto3" json:"characters,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                                            // Map of all characters, keyed by character_id.
	Players            map[int32]*Player      `protobuf:"bytes,8,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                                                  // Map of all players, keyed by player_id.
	TriggeredIncidents map[int32]bool         `protobuf:"bytes,9,rep,name=triggered_incidents,json=triggeredIncidents,proto3" json:"triggered_incidents,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Set of incidents that have been triggered this loop, keyed by incident name.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GameState) Reset() {
	*x = GameState{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{0}
}

func (x *GameState) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameState) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *GameState) GetCurrentLoop() int32 {
	if x != nil {
		return x.CurrentLoop
	}
	return 0
}

func (x *GameState) GetDaysPerLoop() int32 {
	if x != nil {
		return x.DaysPerLoop
	}
	return 0
}

func (x *GameState) GetCurrentDay() int32 {
	if x != nil {
		return x.CurrentDay
	}
	return 0
}

func (x *GameState) GetCurrentPhase() GamePhase {
	if x != nil {
		return x.CurrentPhase
	}
	return GamePhase_GAME_PHASE_UNSPECIFIED
}

func (x *GameState) GetCharacters() map[int32]*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *GameState) GetPlayers() map[int32]*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameState) GetTriggeredIncidents() map[int32]bool {
	if x != nil {
		return x.TriggeredIncidents
	}
	return nil
}

// Player represents a participant in the game.
type Player struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Id                 int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                          // Unique identifier for the player.
	Name               string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                       // Player's display name.
	Role               PlayerRole                `protobuf:"varint,3,opt,name=role,proto3,enum=tragedylooper.v1.PlayerRole" json:"role,omitempty"`                     // The player's role (Mastermind or Protagonist).
	IsLlm              bool                      `protobuf:"varint,4,opt,name=is_llm,json=isLlm,proto3" json:"is_llm,omitempty"`                                       // True if the player is controlled by an AI.
	Hand               *CardList                 `protobuf:"bytes,5,opt,name=hand,proto3" json:"hand,omitempty"`                                                       // The player's current hand of cards.
	LlmSessionId       string                    `protobuf:"bytes,6,opt,name=llm_session_id,json=llmSessionId,proto3" json:"llm_session_id,omitempty"`                 // Session ID for the LLM, if applicable.
	DeductionKnowledge *PlayerDeductionKnowledge `protobuf:"bytes,7,opt,name=deduction_knowledge,json=deductionKnowledge,proto3" json:"deduction_knowledge,omitempty"` // Deduction state for Protagonists.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{1}
}

func (x *Player) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetRole() PlayerRole {
	if x != nil {
		return x.Role
	}
	return PlayerRole_PLAYER_ROLE_UNSPECIFIED
}

func (x *Player) GetIsLlm() bool {
	if x != nil {
		return x.IsLlm
	}
	return false
}

func (x *Player) GetHand() *CardList {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *Player) GetLlmSessionId() string {
	if x != nil {
		return x.LlmSessionId
	}
	return ""
}

func (x *Player) GetDeductionKnowledge() *PlayerDeductionKnowledge {
	if x != nil {
		return x.DeductionKnowledge
	}
	return nil
}

// PlayerDeductionKnowledge holds the information and guesses a Protagonist player has made.
type PlayerDeductionKnowledge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuessedRoles  map[int32]int32        `protobuf:"bytes,1,rep,name=guessed_roles,json=guessedRoles,proto3" json:"guessed_roles,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Guesses about character roles, keyed by character_id.
	Clues         []string               `protobuf:"bytes,2,rep,name=clues,proto3" json:"clues,omitempty"`                                                                                                               // List of collected clues.
	Theories      []string               `protobuf:"bytes,3,rep,name=theories,proto3" json:"theories,omitempty"`                                                                                                         // List of formulated theories.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerDeductionKnowledge) Reset() {
	*x = PlayerDeductionKnowledge{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerDeductionKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDeductionKnowledge) ProtoMessage() {}

func (x *PlayerDeductionKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDeductionKnowledge.ProtoReflect.Descriptor instead.
func (*PlayerDeductionKnowledge) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerDeductionKnowledge) GetGuessedRoles() map[int32]int32 {
	if x != nil {
		return x.GuessedRoles
	}
	return nil
}

func (x *PlayerDeductionKnowledge) GetClues() []string {
	if x != nil {
		return x.Clues
	}
	return nil
}

func (x *PlayerDeductionKnowledge) GetTheories() []string {
	if x != nil {
		return x.Theories
	}
	return nil
}

// PlayerView is a tailored, client-facing representation of the game state for a specific player.
// It includes only the information that the player is permitted to see, hiding sensitive data.
type PlayerView struct {
	state          protoimpl.MessageState         `protogen:"open.v1"`
	GameId         string                         `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                      // Unique identifier for the game session.
	Tick           int64                          `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`                                                                                       // The current game time tick.
	CurrentLoop    int32                          `protobuf:"varint,3,opt,name=current_loop,json=currentLoop,proto3" json:"current_loop,omitempty"`                                                      // The current loop number.
	CurrentDay     int32                          `protobuf:"varint,4,opt,name=current_day,json=currentDay,proto3" json:"current_day,omitempty"`                                                         // The current day within the loop.
	CurrentPhase   GamePhase                      `protobuf:"varint,5,opt,name=current_phase,json=currentPhase,proto3,enum=tragedylooper.v1.GamePhase" json:"current_phase,omitempty"`                   // The current phase within the day.
	Characters     map[int32]*PlayerViewCharacter `protobuf:"bytes,6,rep,name=characters,proto3" json:"characters,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Visible state of all characters.
	Players        map[int32]*PlayerViewPlayer    `protobuf:"bytes,7,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`       // Visible state of all players.
	YourHand       []*Card                        `protobuf:"bytes,8,rep,name=your_hand,json=yourHand,proto3" json:"your_hand,omitempty"`                                                                // The hand of the player receiving this view.
	YourDeductions *PlayerDeductionKnowledge      `protobuf:"bytes,9,opt,name=your_deductions,json=yourDeductions,proto3" json:"your_deductions,omitempty"`                                              // The deduction state of the player receiving this view.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerView) Reset() {
	*x = PlayerView{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerView) ProtoMessage() {}

func (x *PlayerView) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerView.ProtoReflect.Descriptor instead.
func (*PlayerView) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerView) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PlayerView) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *PlayerView) GetCurrentLoop() int32 {
	if x != nil {
		return x.CurrentLoop
	}
	return 0
}

func (x *PlayerView) GetCurrentDay() int32 {
	if x != nil {
		return x.CurrentDay
	}
	return 0
}

func (x *PlayerView) GetCurrentPhase() GamePhase {
	if x != nil {
		return x.CurrentPhase
	}
	return GamePhase_GAME_PHASE_UNSPECIFIED
}

func (x *PlayerView) GetCharacters() map[int32]*PlayerViewCharacter {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *PlayerView) GetPlayers() map[int32]*PlayerViewPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PlayerView) GetYourHand() []*Card {
	if x != nil {
		return x.YourHand
	}
	return nil
}

func (x *PlayerView) GetYourDeductions() *PlayerDeductionKnowledge {
	if x != nil {
		return x.YourDeductions
	}
	return nil
}

// PlayerViewCharacter is a sanitized version of a Character for client display.
// It omits hidden information like the true role (for opponents).
type PlayerViewCharacter struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                     // Character's unique ID.
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                  // Character's name.
	Traits          []string               `protobuf:"bytes,3,rep,name=traits,proto3" json:"traits,omitempty"`                                                                              // Character's current traits.
	CurrentLocation LocationType           `protobuf:"varint,4,opt,name=current_location,json=currentLocation,proto3,enum=tragedylooper.v1.LocationType" json:"current_location,omitempty"` // Character's current location.
	Paranoia        int32                  `protobuf:"varint,5,opt,name=paranoia,proto3" json:"paranoia,omitempty"`                                                                         // Current paranoia stat.
	Goodwill        int32                  `protobuf:"varint,6,opt,name=goodwill,proto3" json:"goodwill,omitempty"`                                                                         // Current goodwill stat.
	Intrigue        int32                  `protobuf:"varint,7,opt,name=intrigue,proto3" json:"intrigue,omitempty"`                                                                         // Current intrigue stat.
	Abilities       []*Ability             `protobuf:"bytes,8,rep,name=abilities,proto3" json:"abilities,omitempty"`                                                                        // List of abilities.
	IsAlive         bool                   `protobuf:"varint,9,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`                                                            // Whether the character is alive.
	InPanicMode     bool                   `protobuf:"varint,10,opt,name=in_panic_mode,json=inPanicMode,proto3" json:"in_panic_mode,omitempty"`                                             // Whether the character is in panic.
	Rules           []*CharacterRule       `protobuf:"bytes,11,rep,name=rules,proto3" json:"rules,omitempty"`                                                                               // List of special rules.
	RevealedRole    PlayerRole             `protobuf:"varint,12,opt,name=revealed_role,json=revealedRole,proto3,enum=tragedylooper.v1.PlayerRole" json:"revealed_role,omitempty"`           // The character's role if it has been revealed, otherwise UNKNOWN.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlayerViewCharacter) Reset() {
	*x = PlayerViewCharacter{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerViewCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerViewCharacter) ProtoMessage() {}

func (x *PlayerViewCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerViewCharacter.ProtoReflect.Descriptor instead.
func (*PlayerViewCharacter) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerViewCharacter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerViewCharacter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerViewCharacter) GetTraits() []string {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *PlayerViewCharacter) GetCurrentLocation() LocationType {
	if x != nil {
		return x.CurrentLocation
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (x *PlayerViewCharacter) GetParanoia() int32 {
	if x != nil {
		return x.Paranoia
	}
	return 0
}

func (x *PlayerViewCharacter) GetGoodwill() int32 {
	if x != nil {
		return x.Goodwill
	}
	return 0
}

func (x *PlayerViewCharacter) GetIntrigue() int32 {
	if x != nil {
		return x.Intrigue
	}
	return 0
}

func (x *PlayerViewCharacter) GetAbilities() []*Ability {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *PlayerViewCharacter) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *PlayerViewCharacter) GetInPanicMode() bool {
	if x != nil {
		return x.InPanicMode
	}
	return false
}

func (x *PlayerViewCharacter) GetRules() []*CharacterRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *PlayerViewCharacter) GetRevealedRole() PlayerRole {
	if x != nil {
		return x.RevealedRole
	}
	return PlayerRole_PLAYER_ROLE_UNSPECIFIED
}

// PlayerViewPlayer is a sanitized version of a Player for client display.
// It omits private information like the other player's hand.
type PlayerViewPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // Player's unique ID.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // Player's name.
	Role          PlayerRole             `protobuf:"varint,3,opt,name=role,proto3,enum=tragedylooper.v1.PlayerRole" json:"role,omitempty"` // Player's role.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerViewPlayer) Reset() {
	*x = PlayerViewPlayer{}
	mi := &file_tragedylooper_v1_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerViewPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerViewPlayer) ProtoMessage() {}

func (x *PlayerViewPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tragedylooper_v1_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerViewPlayer.ProtoReflect.Descriptor instead.
func (*PlayerViewPlayer) Descriptor() ([]byte, []int) {
	return file_tragedylooper_v1_game_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerViewPlayer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerViewPlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerViewPlayer) GetRole() PlayerRole {
	if x != nil {
		return x.Role
	}
	return PlayerRole_PLAYER_ROLE_UNSPECIFIED
}

var File_tragedylooper_v1_game_proto protoreflect.FileDescriptor

const file_tragedylooper_v1_game_proto_rawDesc = "" +
	"\n" +
	"\x1btragedylooper/v1/game.proto\x12\x10tragedylooper.v1\x1a\x1etragedylooper/v1/ability.proto\x1a\x1btragedylooper/v1/card.proto\x1a tragedylooper/v1/character.proto\x1a\x1ctragedylooper/v1/enums.proto\x1a\x1ctragedylooper/v1/event.proto\"\xd2\x05\n" +
	"\tGameState\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\tR\x06gameId\x12\x12\n" +
	"\x04tick\x18\x02 \x01(\x03R\x04tick\x12!\n" +
	"\fcurrent_loop\x18\x03 \x01(\x05R\vcurrentLoop\x12\"\n" +
	"\rdays_per_loop\x18\x04 \x01(\x05R\vdaysPerLoop\x12\x1f\n" +
	"\vcurrent_day\x18\x05 \x01(\x05R\n" +
	"currentDay\x12@\n" +
	"\rcurrent_phase\x18\x06 \x01(\x0e2\x1b.tragedylooper.v1.GamePhaseR\fcurrentPhase\x12K\n" +
	"\n" +
	"characters\x18\a \x03(\v2+.tragedylooper.v1.GameState.CharactersEntryR\n" +
	"characters\x12B\n" +
	"\aplayers\x18\b \x03(\v2(.tragedylooper.v1.GameState.PlayersEntryR\aplayers\x12d\n" +
	"\x13triggered_incidents\x18\t \x03(\v23.tragedylooper.v1.GameState.TriggeredIncidentsEntryR\x12triggeredIncidents\x1aZ\n" +
	"\x0fCharactersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.tragedylooper.v1.CharacterR\x05value:\x028\x01\x1aT\n" +
	"\fPlayersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.tragedylooper.v1.PlayerR\x05value:\x028\x01\x1aE\n" +
	"\x17TriggeredIncidentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xa8\x02\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x120\n" +
	"\x04role\x18\x03 \x01(\x0e2\x1c.tragedylooper.v1.PlayerRoleR\x04role\x12\x15\n" +
	"\x06is_llm\x18\x04 \x01(\bR\x05isLlm\x12.\n" +
	"\x04hand\x18\x05 \x01(\v2\x1a.tragedylooper.v1.CardListR\x04hand\x12$\n" +
	"\x0ellm_session_id\x18\x06 \x01(\tR\fllmSessionId\x12[\n" +
	"\x13deduction_knowledge\x18\a \x01(\v2*.tragedylooper.v1.PlayerDeductionKnowledgeR\x12deductionKnowledge\"\xf0\x01\n" +
	"\x18PlayerDeductionKnowledge\x12a\n" +
	"\rguessed_roles\x18\x01 \x03(\v2<.tragedylooper.v1.PlayerDeductionKnowledge.GuessedRolesEntryR\fguessedRoles\x12\x14\n" +
	"\x05clues\x18\x02 \x03(\tR\x05clues\x12\x1a\n" +
	"\btheories\x18\x03 \x03(\tR\btheories\x1a?\n" +
	"\x11GuessedRolesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa2\x05\n" +
	"\n" +
	"PlayerView\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\tR\x06gameId\x12\x12\n" +
	"\x04tick\x18\x02 \x01(\x03R\x04tick\x12!\n" +
	"\fcurrent_loop\x18\x03 \x01(\x05R\vcurrentLoop\x12\x1f\n" +
	"\vcurrent_day\x18\x04 \x01(\x05R\n" +
	"currentDay\x12@\n" +
	"\rcurrent_phase\x18\x05 \x01(\x0e2\x1b.tragedylooper.v1.GamePhaseR\fcurrentPhase\x12L\n" +
	"\n" +
	"characters\x18\x06 \x03(\v2,.tragedylooper.v1.PlayerView.CharactersEntryR\n" +
	"characters\x12C\n" +
	"\aplayers\x18\a \x03(\v2).tragedylooper.v1.PlayerView.PlayersEntryR\aplayers\x123\n" +
	"\tyour_hand\x18\b \x03(\v2\x16.tragedylooper.v1.CardR\byourHand\x12S\n" +
	"\x0fyour_deductions\x18\t \x01(\v2*.tragedylooper.v1.PlayerDeductionKnowledgeR\x0eyourDeductions\x1ad\n" +
	"\x0fCharactersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12;\n" +
	"\x05value\x18\x02 \x01(\v2%.tragedylooper.v1.PlayerViewCharacterR\x05value:\x028\x01\x1a^\n" +
	"\fPlayersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x128\n" +
	"\x05value\x18\x02 \x01(\v2\".tragedylooper.v1.PlayerViewPlayerR\x05value:\x028\x01\"\xe2\x03\n" +
	"\x13PlayerViewCharacter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06traits\x18\x03 \x03(\tR\x06traits\x12I\n" +
	"\x10current_location\x18\x04 \x01(\x0e2\x1e.tragedylooper.v1.LocationTypeR\x0fcurrentLocation\x12\x1a\n" +
	"\bparanoia\x18\x05 \x01(\x05R\bparanoia\x12\x1a\n" +
	"\bgoodwill\x18\x06 \x01(\x05R\bgoodwill\x12\x1a\n" +
	"\bintrigue\x18\a \x01(\x05R\bintrigue\x127\n" +
	"\tabilities\x18\b \x03(\v2\x19.tragedylooper.v1.AbilityR\tabilities\x12\x19\n" +
	"\bis_alive\x18\t \x01(\bR\aisAlive\x12\"\n" +
	"\rin_panic_mode\x18\n" +
	" \x01(\bR\vinPanicMode\x125\n" +
	"\x05rules\x18\v \x03(\v2\x1f.tragedylooper.v1.CharacterRuleR\x05rules\x12A\n" +
	"\rrevealed_role\x18\f \x01(\x0e2\x1c.tragedylooper.v1.PlayerRoleR\frevealedRole\"h\n" +
	"\x10PlayerViewPlayer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x120\n" +
	"\x04role\x18\x03 \x01(\x0e2\x1c.tragedylooper.v1.PlayerRoleR\x04roleB\xb9\x01\n" +
	"\x14com.tragedylooper.v1B\tGameProtoP\x01Z5github.com/constellation39/tragedyLooper/pkg/proto/v1\xa2\x02\x03TXX\xaa\x02\x10Tragedylooper.V1\xca\x02\x10Tragedylooper\\V1\xe2\x02\x1cTragedylooper\\V1\\GPBMetadata\xea\x02\x11Tragedylooper::V1b\x06proto3"

var (
	file_tragedylooper_v1_game_proto_rawDescOnce sync.Once
	file_tragedylooper_v1_game_proto_rawDescData []byte
)

func file_tragedylooper_v1_game_proto_rawDescGZIP() []byte {
	file_tragedylooper_v1_game_proto_rawDescOnce.Do(func() {
		file_tragedylooper_v1_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tragedylooper_v1_game_proto_rawDesc), len(file_tragedylooper_v1_game_proto_rawDesc)))
	})
	return file_tragedylooper_v1_game_proto_rawDescData
}

var file_tragedylooper_v1_game_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tragedylooper_v1_game_proto_goTypes = []any{
	(*GameState)(nil),                // 0: tragedylooper.v1.GameState
	(*Player)(nil),                   // 1: tragedylooper.v1.Player
	(*PlayerDeductionKnowledge)(nil), // 2: tragedylooper.v1.PlayerDeductionKnowledge
	(*PlayerView)(nil),               // 3: tragedylooper.v1.PlayerView
	(*PlayerViewCharacter)(nil),      // 4: tragedylooper.v1.PlayerViewCharacter
	(*PlayerViewPlayer)(nil),         // 5: tragedylooper.v1.PlayerViewPlayer
	nil,                              // 6: tragedylooper.v1.GameState.CharactersEntry
	nil,                              // 7: tragedylooper.v1.GameState.PlayersEntry
	nil,                              // 8: tragedylooper.v1.GameState.TriggeredIncidentsEntry
	nil,                              // 9: tragedylooper.v1.PlayerDeductionKnowledge.GuessedRolesEntry
	nil,                              // 10: tragedylooper.v1.PlayerView.CharactersEntry
	nil,                              // 11: tragedylooper.v1.PlayerView.PlayersEntry
	(GamePhase)(0),                   // 12: tragedylooper.v1.GamePhase
	(PlayerRole)(0),                  // 13: tragedylooper.v1.PlayerRole
	(*CardList)(nil),                 // 14: tragedylooper.v1.CardList
	(*Card)(nil),                     // 15: tragedylooper.v1.Card
	(LocationType)(0),                // 16: tragedylooper.v1.LocationType
	(*Ability)(nil),                  // 17: tragedylooper.v1.Ability
	(*CharacterRule)(nil),            // 18: tragedylooper.v1.CharacterRule
	(*Character)(nil),                // 19: tragedylooper.v1.Character
}
var file_tragedylooper_v1_game_proto_depIdxs = []int32{
	12, // 0: tragedylooper.v1.GameState.current_phase:type_name -> tragedylooper.v1.GamePhase
	6,  // 1: tragedylooper.v1.GameState.characters:type_name -> tragedylooper.v1.GameState.CharactersEntry
	7,  // 2: tragedylooper.v1.GameState.players:type_name -> tragedylooper.v1.GameState.PlayersEntry
	8,  // 3: tragedylooper.v1.GameState.triggered_incidents:type_name -> tragedylooper.v1.GameState.TriggeredIncidentsEntry
	13, // 4: tragedylooper.v1.Player.role:type_name -> tragedylooper.v1.PlayerRole
	14, // 5: tragedylooper.v1.Player.hand:type_name -> tragedylooper.v1.CardList
	2,  // 6: tragedylooper.v1.Player.deduction_knowledge:type_name -> tragedylooper.v1.PlayerDeductionKnowledge
	9,  // 7: tragedylooper.v1.PlayerDeductionKnowledge.guessed_roles:type_name -> tragedylooper.v1.PlayerDeductionKnowledge.GuessedRolesEntry
	12, // 8: tragedylooper.v1.PlayerView.current_phase:type_name -> tragedylooper.v1.GamePhase
	10, // 9: tragedylooper.v1.PlayerView.characters:type_name -> tragedylooper.v1.PlayerView.CharactersEntry
	11, // 10: tragedylooper.v1.PlayerView.players:type_name -> tragedylooper.v1.PlayerView.PlayersEntry
	15, // 11: tragedylooper.v1.PlayerView.your_hand:type_name -> tragedylooper.v1.Card
	2,  // 12: tragedylooper.v1.PlayerView.your_deductions:type_name -> tragedylooper.v1.PlayerDeductionKnowledge
	16, // 13: tragedylooper.v1.PlayerViewCharacter.current_location:type_name -> tragedylooper.v1.LocationType
	17, // 14: tragedylooper.v1.PlayerViewCharacter.abilities:type_name -> tragedylooper.v1.Ability
	18, // 15: tragedylooper.v1.PlayerViewCharacter.rules:type_name -> tragedylooper.v1.CharacterRule
	13, // 16: tragedylooper.v1.PlayerViewCharacter.revealed_role:type_name -> tragedylooper.v1.PlayerRole
	13, // 17: tragedylooper.v1.PlayerViewPlayer.role:type_name -> tragedylooper.v1.PlayerRole
	19, // 18: tragedylooper.v1.GameState.CharactersEntry.value:type_name -> tragedylooper.v1.Character
	1,  // 19: tragedylooper.v1.GameState.PlayersEntry.value:type_name -> tragedylooper.v1.Player
	4,  // 20: tragedylooper.v1.PlayerView.CharactersEntry.value:type_name -> tragedylooper.v1.PlayerViewCharacter
	5,  // 21: tragedylooper.v1.PlayerView.PlayersEntry.value:type_name -> tragedylooper.v1.PlayerViewPlayer
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tragedylooper_v1_game_proto_init() }
func file_tragedylooper_v1_game_proto_init() {
	if File_tragedylooper_v1_game_proto != nil {
		return
	}
	file_tragedylooper_v1_ability_proto_init()
	file_tragedylooper_v1_card_proto_init()
	file_tragedylooper_v1_character_proto_init()
	file_tragedylooper_v1_enums_proto_init()
	file_tragedylooper_v1_event_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tragedylooper_v1_game_proto_rawDesc), len(file_tragedylooper_v1_game_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tragedylooper_v1_game_proto_goTypes,
		DependencyIndexes: file_tragedylooper_v1_game_proto_depIdxs,
		MessageInfos:      file_tragedylooper_v1_game_proto_msgTypes,
	}.Build()
	File_tragedylooper_v1_game_proto = out.File
	file_tragedylooper_v1_game_proto_goTypes = nil
	file_tragedylooper_v1_game_proto_depIdxs = nil
}
