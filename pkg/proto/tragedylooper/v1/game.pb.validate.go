// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tragedylooper/v1/game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GameState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameStateMultiError, or nil
// if none found.
func (m *GameState) ValidateAll() error {
	return m.validate(true)
}

func (m *GameState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Tick

	// no validation rules for CurrentLoop

	// no validation rules for DaysPerLoop

	// no validation rules for CurrentDay

	// no validation rules for CurrentPhase

	{
		sorted_keys := make([]int32, len(m.GetCharacters()))
		i := 0
		for key := range m.GetCharacters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCharacters()[key]
			_ = val

			// no validation rules for Characters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GameStateValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GameStateValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GameStateValidationError{
						field:  fmt.Sprintf("Characters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetPlayers()))
		i := 0
		for key := range m.GetPlayers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPlayers()[key]
			_ = val

			// no validation rules for Players[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GameStateValidationError{
							field:  fmt.Sprintf("Players[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GameStateValidationError{
							field:  fmt.Sprintf("Players[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GameStateValidationError{
						field:  fmt.Sprintf("Players[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for TriggeredIncidents

	if len(errors) > 0 {
		return GameStateMultiError(errors)
	}

	return nil
}

// GameStateMultiError is an error wrapping multiple validation errors returned
// by GameState.ValidateAll() if the designated constraints aren't met.
type GameStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameStateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameStateMultiError) AllErrors() []error { return m }

// GameStateValidationError is the validation error returned by
// GameState.Validate if the designated constraints aren't met.
type GameStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameStateValidationError) ErrorName() string { return "GameStateValidationError" }

// Error satisfies the builtin error interface
func (e GameStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameStateValidationError{}

// Validate checks the field values on Player with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Player) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Player with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PlayerMultiError, or nil if none found.
func (m *Player) ValidateAll() error {
	return m.validate(true)
}

func (m *Player) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Role

	// no validation rules for IsLlm

	if all {
		switch v := interface{}(m.GetHand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerValidationError{
					field:  "Hand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerValidationError{
					field:  "Hand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerValidationError{
				field:  "Hand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LlmSessionId

	if all {
		switch v := interface{}(m.GetDeductionKnowledge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerValidationError{
					field:  "DeductionKnowledge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerValidationError{
					field:  "DeductionKnowledge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeductionKnowledge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerValidationError{
				field:  "DeductionKnowledge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlayerMultiError(errors)
	}

	return nil
}

// PlayerMultiError is an error wrapping multiple validation errors returned by
// Player.ValidateAll() if the designated constraints aren't met.
type PlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerMultiError) AllErrors() []error { return m }

// PlayerValidationError is the validation error returned by Player.Validate if
// the designated constraints aren't met.
type PlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerValidationError) ErrorName() string { return "PlayerValidationError" }

// Error satisfies the builtin error interface
func (e PlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerValidationError{}

// Validate checks the field values on PlayerDeductionKnowledge with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerDeductionKnowledge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerDeductionKnowledge with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerDeductionKnowledgeMultiError, or nil if none found.
func (m *PlayerDeductionKnowledge) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerDeductionKnowledge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuessedRoles

	if len(errors) > 0 {
		return PlayerDeductionKnowledgeMultiError(errors)
	}

	return nil
}

// PlayerDeductionKnowledgeMultiError is an error wrapping multiple validation
// errors returned by PlayerDeductionKnowledge.ValidateAll() if the designated
// constraints aren't met.
type PlayerDeductionKnowledgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerDeductionKnowledgeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerDeductionKnowledgeMultiError) AllErrors() []error { return m }

// PlayerDeductionKnowledgeValidationError is the validation error returned by
// PlayerDeductionKnowledge.Validate if the designated constraints aren't met.
type PlayerDeductionKnowledgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerDeductionKnowledgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerDeductionKnowledgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerDeductionKnowledgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerDeductionKnowledgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerDeductionKnowledgeValidationError) ErrorName() string {
	return "PlayerDeductionKnowledgeValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerDeductionKnowledgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerDeductionKnowledge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerDeductionKnowledgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerDeductionKnowledgeValidationError{}

// Validate checks the field values on PlayerView with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayerView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerView with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayerViewMultiError, or
// nil if none found.
func (m *PlayerView) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Tick

	// no validation rules for CurrentLoop

	// no validation rules for CurrentDay

	// no validation rules for CurrentPhase

	{
		sorted_keys := make([]int32, len(m.GetCharacters()))
		i := 0
		for key := range m.GetCharacters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCharacters()[key]
			_ = val

			// no validation rules for Characters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PlayerViewValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PlayerViewValidationError{
							field:  fmt.Sprintf("Characters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PlayerViewValidationError{
						field:  fmt.Sprintf("Characters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetPlayers()))
		i := 0
		for key := range m.GetPlayers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPlayers()[key]
			_ = val

			// no validation rules for Players[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PlayerViewValidationError{
							field:  fmt.Sprintf("Players[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PlayerViewValidationError{
							field:  fmt.Sprintf("Players[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PlayerViewValidationError{
						field:  fmt.Sprintf("Players[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetYourHand() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerViewValidationError{
						field:  fmt.Sprintf("YourHand[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerViewValidationError{
						field:  fmt.Sprintf("YourHand[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerViewValidationError{
					field:  fmt.Sprintf("YourHand[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetYourDeductions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerViewValidationError{
					field:  "YourDeductions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerViewValidationError{
					field:  "YourDeductions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetYourDeductions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerViewValidationError{
				field:  "YourDeductions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlayerViewMultiError(errors)
	}

	return nil
}

// PlayerViewMultiError is an error wrapping multiple validation errors
// returned by PlayerView.ValidateAll() if the designated constraints aren't met.
type PlayerViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerViewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerViewMultiError) AllErrors() []error { return m }

// PlayerViewValidationError is the validation error returned by
// PlayerView.Validate if the designated constraints aren't met.
type PlayerViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerViewValidationError) ErrorName() string { return "PlayerViewValidationError" }

// Error satisfies the builtin error interface
func (e PlayerViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerViewValidationError{}

// Validate checks the field values on PlayerViewCharacter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerViewCharacter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerViewCharacter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerViewCharacterMultiError, or nil if none found.
func (m *PlayerViewCharacter) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerViewCharacter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CurrentLocation

	// no validation rules for Paranoia

	// no validation rules for Goodwill

	// no validation rules for Intrigue

	for idx, item := range m.GetAbilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerViewCharacterValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerViewCharacterValidationError{
						field:  fmt.Sprintf("Abilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerViewCharacterValidationError{
					field:  fmt.Sprintf("Abilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsAlive

	// no validation rules for InPanicMode

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayerViewCharacterValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayerViewCharacterValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayerViewCharacterValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RevealedRole

	if len(errors) > 0 {
		return PlayerViewCharacterMultiError(errors)
	}

	return nil
}

// PlayerViewCharacterMultiError is an error wrapping multiple validation
// errors returned by PlayerViewCharacter.ValidateAll() if the designated
// constraints aren't met.
type PlayerViewCharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerViewCharacterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerViewCharacterMultiError) AllErrors() []error { return m }

// PlayerViewCharacterValidationError is the validation error returned by
// PlayerViewCharacter.Validate if the designated constraints aren't met.
type PlayerViewCharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerViewCharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerViewCharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerViewCharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerViewCharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerViewCharacterValidationError) ErrorName() string {
	return "PlayerViewCharacterValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerViewCharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerViewCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerViewCharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerViewCharacterValidationError{}

// Validate checks the field values on PlayerViewPlayer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlayerViewPlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerViewPlayer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerViewPlayerMultiError, or nil if none found.
func (m *PlayerViewPlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerViewPlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Role

	if len(errors) > 0 {
		return PlayerViewPlayerMultiError(errors)
	}

	return nil
}

// PlayerViewPlayerMultiError is an error wrapping multiple validation errors
// returned by PlayerViewPlayer.ValidateAll() if the designated constraints
// aren't met.
type PlayerViewPlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerViewPlayerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerViewPlayerMultiError) AllErrors() []error { return m }

// PlayerViewPlayerValidationError is the validation error returned by
// PlayerViewPlayer.Validate if the designated constraints aren't met.
type PlayerViewPlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerViewPlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerViewPlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerViewPlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerViewPlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerViewPlayerValidationError) ErrorName() string { return "PlayerViewPlayerValidationError" }

// Error satisfies the builtin error interface
func (e PlayerViewPlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerViewPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerViewPlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerViewPlayerValidationError{}
