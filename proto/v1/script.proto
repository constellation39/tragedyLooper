syntax = "proto3";

package v1;

import "v1/character.proto";
import "v1/condition.proto";
import "v1/enums.proto";
import "v1/incident.proto";

option go_package = "tragedylooper/internal/game/proto/v1;v1";

// Tragedy represents a tragedy in the script.
message Tragedy {
  IncidentType tragedy_type = 1;
  int32 day = 2;
  repeated Condition conditions = 3;
}

// 剧本信息
message Script {
  int32 id = 1; // 剧本唯一ID
  string name = 2; // 剧本名称
  string description = 3; // 剧本描述
  TragedyScriptType main_plot = 4; // 主线剧情类型
  repeated TragedyScriptType sub_plots = 5; // 支线剧情类型列表
  repeated CharacterConfig characters = 6; // 剧本中角色的初始配置
  repeated IncidentConfig incidents = 7; // 剧本中预设的事件（悲剧）配置
  int32 loop_count = 8; // 允许的最大时间循环次数
  int32 days_per_loop = 9; // 每个循环包含的天数
  repeated GameEndCondition win_conditions = 10; // 胜利条件列表
  repeated GameEndCondition lose_conditions = 11; // 失败条件列表
  repeated int32 mastermind_card_ids = 12; // IDs of cards available to the Mastermind.
  repeated int32 protagonist_card_ids = 13; // IDs of cards available to the Protagonists.
  repeated string special_rules_description = 14; // 剧本特有规则的文字描述
  repeated Tragedy tragedies = 15; // 剧本中的悲剧列表
}

// 游戏结束条件
message GameEndCondition {
  enum ConditionType {// 条件类型
    CONDITION_TYPE_UNSPECIFIED = 0; // 未指定
    ALL_TRAGEDIES_PREVENTED = 1; // 所有悲剧都被阻止
    SPECIFIC_TRAGEDY_TRIGGERED = 2; // 特定悲剧被触发
    MAX_LOOPS_REACHED = 3; // 达到最大循环次数
    PROTAGONIST_GUESSED_CORRECTLY = 4; // 主角猜测正确
    PROTAGONIST_GUESSED_INCORRECTLY = 5; // 主角猜测错误
  }
  ConditionType type = 1; // 结束条件类型
  optional IncidentType incident_type = 2; // 仅当 SPECIFIC_TRAGEDY_TRIGGERED 时使用，指定被触发的悲剧类型
}
