syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/condition.proto";
import "tragedylooper/v1/effect.proto";
import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// AbilityConfig defines the configuration for a character's ability.
message AbilityConfig {
  // The unique identifier for the ability.
  int32 id = 1;
  // The name of the ability.
  string name = 2;
  // A description of the ability.
  string description = 3;
  // The trigger type for the ability.
  TriggerType ability_type = 4 [json_name = "type"];
  // Optional: filters for game event triggers.
  repeated GameEventType event_filters = 5;
  // The effect of the ability.
  Effect effect = 6;
  // Whether the ability can only be used once per loop.
  bool once_per_loop = 7;
  // The player role that can refuse this ability.
  PlayerRole refusal_role = 8;
  // Whether the ability is passive.
  bool is_passive = 9;
  // Whether the ability is mandatory (cannot be refused).
  bool is_mandatory = 10;
  // The priority of the ability's resolution.
  int32 priority = 11;
  // A list of conditions that must be met to use the ability.
  repeated Condition conditions = 12;
  // Whether the ability requires a choice to be made.
  bool requires_choice = 13;
  // The goodwill rank required to use the ability.
  int32 goodwill_rank = 14;
  // A list of locations that the ability is restricted to.
  repeated LocationType restricted_to_locations = 15 [json_name = "restricted_to_location"];
  // The number of times the ability can be used per loop.
  int32 times_per_loop = 16 [json_name = "times_per_loop"];
  // Whether the ability is immune to goodwill refusal.
  bool immune_to_goodwill_refusal = 17 [json_name = "immune_to_goodwill_refusal"];
}

// CompoundAbility defines a combination of multiple abilities.
message CompoundAbility {
  // The operator to use when combining abilities.
  enum Operator {
    // Unspecified operator.
    OPERATOR_UNSPECIFIED = 0;
    // The AND operator.
    OPERATOR_AND = 1;
    // The OR operator.
    OPERATOR_OR = 2;
  }
  // The operator to use when combining abilities.
  Operator operator = 1;
  // The sub-abilities to combine.
  repeated AbilityConfig sub_abilities = 2;
}

// Ability defines a character's ability at runtime.
message Ability {
  // The configuration for the ability.
  AbilityConfig config = 1;
  // Whether the ability has been used in the current loop.
  bool used_this_loop = 2;
  // The ID of the character that owns the ability.
  int32 owner_character_id = 3;
}

