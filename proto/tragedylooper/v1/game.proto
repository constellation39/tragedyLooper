syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/ability.proto";
import "tragedylooper/v1/card.proto";
import "tragedylooper/v1/character.proto";
import "tragedylooper/v1/enums.proto";
import "tragedylooper/v1/event.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// GameState represents the complete, authoritative state of a game at a specific moment.
// It is the single source of truth, intended for server-side use and persistence.
// It should not contain historical data like event logs, which should be handled separately.
message GameState {
  string game_id = 1; // Unique identifier for the game session.
  int64 tick = 2; // A monotonic clock representing the finest-grained unit of game time.
  int32 current_loop = 3; // The current loop number.
  int32 days_per_loop = 4; // The total number of days in a single loop.
  int32 current_day = 5; // The current day within the loop.
  GamePhase current_phase = 6; // The current phase within the day.

  map<int32, Character> characters = 7; // Map of all characters, keyed by character_id.
  map<int32, Player> players = 8; // Map of all players, keyed by player_id.

  map<int32, bool> triggered_incidents = 9; // Set of incidents that have been triggered this loop, keyed by incident name.

  // Deprecated: Event logs are no longer stored in GameState.
  // repeated GameEvent day_events = 14;
  // repeated GameEvent loop_events = 15;

  // Deprecated: Character stat limits are defined in CharacterConfig.
  // map<int32, int32> character_paranoia_limits = 16;
  // map<int32, int32> character_goodwill_limits = 17;
  // map<int32, int32> character_intrigue_limits = 18;

  // Deprecated: This information is now derived from the state of individual cards.
  // map<int32, CardList> played_cards_this_day = 10;
  // map<int32, bool> played_cards_this_loop = 11;
}

// Player represents a participant in the game.
message Player {
  int32 id = 1; // Unique identifier for the player.
  string name = 2; // Player's display name.
  PlayerRole role = 3; // The player's role (Mastermind or Protagonist).
  bool is_llm = 4; // True if the player is controlled by an AI.
  CardList hand = 5; // The player's current hand of cards.
  string llm_session_id = 6; // Session ID for the LLM, if applicable.
  PlayerDeductionKnowledge deduction_knowledge = 7; // Deduction state for Protagonists.
}

// PlayerDeductionKnowledge holds the information and guesses a Protagonist player has made.
message PlayerDeductionKnowledge {
  map<int32, int32> guessed_roles = 1; // Guesses about character roles, keyed by character_id.
  repeated string clues = 2; // List of collected clues.
  repeated string theories = 3; // List of formulated theories.
}

// PlayerView is a tailored, client-facing representation of the game state for a specific player.
// It includes only the information that the player is permitted to see, hiding sensitive data.
message PlayerView {
  string game_id = 1; // Unique identifier for the game session.
  int64 tick = 2; // The current game time tick.
  int32 current_loop = 3; // The current loop number.
  int32 current_day = 4; // The current day within the loop.
  GamePhase current_phase = 5; // The current phase within the day.

  map<int32, PlayerViewCharacter> characters = 6; // Visible state of all characters.
  map<int32, PlayerViewPlayer> players = 7; // Visible state of all players.

  repeated Card your_hand = 8; // The hand of the player receiving this view.
  PlayerDeductionKnowledge your_deductions = 9; // The deduction state of the player receiving this view.

  // Note: Public events are now streamed to the client, not included in the view.
  // repeated GameEvent public_events = 12;
}

// PlayerViewCharacter is a sanitized version of a Character for client display.
// It omits hidden information like the true role (for opponents).
message PlayerViewCharacter {
  int32 id = 1; // Character's unique ID.
  string name = 2; // Character's name.
  repeated string traits = 3; // Character's current traits.
  LocationType current_location = 4; // Character's current location.
  int32 paranoia = 5; // Current paranoia stat.
  int32 goodwill = 6; // Current goodwill stat.
  int32 intrigue = 7; // Current intrigue stat.
  repeated Ability abilities = 8; // List of abilities.
  bool is_alive = 9; // Whether the character is alive.
  bool in_panic_mode = 10; // Whether the character is in panic.
  repeated CharacterRule rules = 11; // List of special rules.
  PlayerRole revealed_role = 12; // The character's role if it has been revealed, otherwise UNKNOWN.
}

// PlayerViewPlayer is a sanitized version of a Player for client display.
// It omits private information like the other player's hand.
message PlayerViewPlayer {
  int32 id = 1; // Player's unique ID.
  string name = 2; // Player's name.
  PlayerRole role = 3; // Player's role.
}
