syntax = "proto3";

package tragedylooper.v1;


import "validate/validate.proto";
import "tragedylooper/v1/enums.proto";
import "tragedylooper/v1/incident.proto";
import "tragedylooper/v1/character.proto";
import "tragedylooper/v1/card.proto";
import "tragedylooper/v1/ability.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// Script defines the configuration for a tragedy looper script.
message ScriptConfig {
  // The unique identifier for the script.
  int32 id = 1 [ (validate.rules).int32.gt = 0 ];
  // The name of the script.
  string name = 2 [ (validate.rules).string.min_len = 1 ];
  // A description of the script.
  string description = 3;

  // Main plot configurations. ID range: 1000-1999
  map<int32, PlotConfig> main_plots = 4 [ (validate.rules).map.keys.int32 = { gte: 1000, lt: 2000 } ];
  // Sub plot configurations. ID range: 2000-2999
  map<int32, PlotConfig> sub_plots = 5 [ (validate.rules).map.keys.int32 = { gte: 2000, lt: 3000 } ];

  // Role configurations. ID range: 3000-3999
  map<int32, RoleConfig> roles = 6 [ (validate.rules).map.keys.int32 = { gte: 3000, lt: 4000 } ];

  // Incident configurations. ID range: 4000-4999
  map<int32, IncidentConfig> incidents = 7 [ (validate.rules).map.keys.int32 = { gte: 4000, lt: 5000 } ];

  // Character configurations. ID range: 5000-5999
  map<int32, CharacterConfig> characters = 8 [ (validate.rules).map.keys.int32 = { gte: 5000, lt: 6000 } ];

  // Mastermind card configurations. ID range: 6000-6999
  map<int32, CardConfig> mastermind_cards = 9 [ (validate.rules).map.keys.int32 = { gte: 6000, lt: 7000 } ];
  // Protagonist card configurations. ID range: 7000-7999
  map<int32, CardConfig> protagonist_cards = 10 [ (validate.rules).map.keys.int32 = { gte: 7000, lt: 8000 } ];

  // A map of script configurations. ID range: 8000-8999
  map<int32, ScriptModel> script_models = 11 [ (validate.rules).map.keys.int32 = { gte: 8000, lt: 9000 } ];
}



// ScriptConfig defines the configuration for a specific script.
message ScriptModel {
  // Private information for the script.
  PrivateInfo private_info = 1;
  // Public information for the script.
  PublicInfo public_info = 2;
}

// PrivateInfo defines the private information for a script.
message PrivateInfo {
  // The main plot of the script.
  int32 main_plot_id = 1;
  // A list of sub plots for the script.
  repeated int32 sub_plots_ids = 2;
  // A map of characters in the script.
  repeated int32 characters_ids = 3;
  // A map of incidents in the script.
  repeated int32 incident_ids = 4;
}


// PublicInfo defines the public information for a script.
message PublicInfo {
  // The unique identifier for the script configuration.
  int32 script_config_id = 1 [ (validate.rules).int32.gt = 0 ];

  // Game rules.
  // The number of loops in the game.
  int32 loop_count = 2 [ (validate.rules).int32.gt = 0 ];
  // The number of days per loop.
  int32 days_per_loop = 3 [ (validate.rules).int32.gt = 0 ];
  // Whether players can discuss information.
  bool can_discuss = 4;

  // Special rules.
  // A map of special incidents.
  repeated int32 special_incident_ids = 5;
  // A map of scheduled incidents.
  repeated int32 scheduled_incident_ids = 6;
}

// RoleConfig defines the configuration for a role.
message RoleConfig {
  // The unique identifier for the role.
  int32 id = 1 [ (validate.rules).int32.gt = 0 ];
  // The name of the role.
  string name = 2 [ (validate.rules).string.min_len = 1 ];
  // The limit of characters that can have this role.
  int32 limit = 3 [ (validate.rules).int32.gte = 1 ];
  // A map of abilities for this role.
  map<int32, AbilityConfig> abilities = 4;
  // Defines the character's goodwill status.
  // 0: normal, 1: ignore goodwill, 2: always ignore goodwill.
  int32 goodwill_rule = 5 [ (validate.rules).int32 = { gte: 0, lte: 2 } ];
  // Defines if the character can be made invincible.
  bool can_be_invincible = 6;
}

// PlotConfig defines a story plot.
message PlotConfig {
  // The unique identifier for the plot.
  int32 id = 1 [ (validate.rules).int32.gt = 0 ];
  // The type of the plot.
  PlotType type = 2;
  // The name of the plot.
  string name = 3 [ (validate.rules).string.min_len = 1 ];
  // A description of the plot.
  string description = 4;
  // A map of incident identifiers for this plot.
  map<int32, IncidentConfig> incident_ids = 5;
  // A map of role assignments for this plot.
  map<int32, int32> role_assignments = 6;
}


// ScriptConfigLib is a library of script configurations.
message ScriptConfigLib {
  // A map of script configurations.
  map<int32, ScriptConfig> scripts = 1;
}