syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/condition.proto"; // Import TargetSelector
import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// Effect defines the specific action of an ability, card, or rule.
message Effect {
  // The type of the effect.
  oneof effect_type {
    // Adjusts a character's stat.
    AdjustStatEffect adjust_stat = 1;
    // Moves a character to a different location.
    MoveCharacterEffect move_character = 2;
    // Forbids a character from performing an action.
    ForbidEffect forbid = 3;
    // Grants an ability to a character.
    GrantAbilityEffect grant_ability = 4;
    // Reveals a character's role.
    RevealRoleEffect reveal_role = 5;
    // Changes a character's role.
    ChangeRoleEffect change_role = 6;
    // Triggers an incident.
    TriggerIncidentEffect trigger_incident = 7;
    // Ends the game.
    EndGameEffect end_game = 8;
    // Adds a trait to a character.
    AddTraitEffect add_trait = 9;
    // Removes a trait from a character.
    RemoveTraitEffect remove_trait = 10;
    // A compound effect.
    CompoundEffect compound_effect = 11;
  }
}

// CompoundEffect defines a combination of multiple effects.
message CompoundEffect {
  // The operator to use when combining effects.
  enum Operator {
    // Unspecified operator.
    OPERATOR_UNSPECIFIED = 0;
    // Executes all effects in sequence.
    OPERATOR_SEQUENCE = 1;
    // The player chooses one effect to execute.
    OPERATOR_CHOOSE_ONE = 2;
  }
  // The operator for combining effects.
  Operator operator = 1;
  // A list of sub-effects.
  repeated Effect sub_effects = 2;
}

// AdjustStatEffect defines an effect that adjusts a character's stat.
message AdjustStatEffect {
  // The target character.
  TargetSelector target = 1;
  // The type of stat to adjust.
  StatType stat_type = 2;
  // The amount to adjust the stat by (positive for increase, negative for decrease).
  int32 amount = 3;
}

// MoveCharacterEffect defines an effect that moves a character.
message MoveCharacterEffect {
  // The target character.
  TargetSelector target = 1;
  // The destination location.
  LocationType destination = 2;
}

// ForbidEffect defines an effect that forbids an action.
message ForbidEffect {
  // The target character.
  TargetSelector target = 1;
  // The type of action to forbid.
  enum ForbidType {
    // Unspecified forbid type.
    FORBID_TYPE_UNSPECIFIED = 0;
    // Forbids movement.
    FORBID_TYPE_MOVEMENT = 1;
    // Forbids paranoia changes.
    FORBID_TYPE_PARANOIA_CHANGE = 2;
    // Forbids goodwill changes.
    FORBID_TYPE_GOODWILL_CHANGE = 3;
    // Forbids intrigue changes.
    FORBID_TYPE_INTRIGUE_CHANGE = 4;
  }
  // The type of action to forbid.
  ForbidType forbid_type = 2;
}

// GrantAbilityEffect defines an effect that grants an ability.
message GrantAbilityEffect {
  // The target character.
  TargetSelector target = 1;
  // The ID of the ability to grant.
  int32 ability_id = 2;
  // Whether the ability is temporary (e.g., lasts for one day or one loop).
  bool is_temporary = 3;
}

// RevealRoleEffect defines an effect that reveals a character's role.
message RevealRoleEffect {
  // The target character.
  TargetSelector target = 1;
}

// ChangeRoleEffect defines an effect that changes a character's role.
message ChangeRoleEffect {
  // The target character.
  TargetSelector target = 1;
  // The new role.
  int32 new_role = 2;
}

// TriggerIncidentEffect defines an effect that triggers an incident.
message TriggerIncidentEffect {
  // The ID of the incident to trigger (references an IncidentConfig in the ScriptConfig).
  int32 incident_id = 1;
}

// EndGameEffect defines an effect that ends the game.
message EndGameEffect {
  // The winning player role.
  PlayerRole winner = 1;
  // The reason for the game ending.
  string reason = 2;
}

// AddTraitEffect defines an effect that adds a trait to a character.
message AddTraitEffect {
  // The target character.
  TargetSelector target = 1;
  // The trait to add.
  string trait = 2;
}

// RemoveTraitEffect defines an effect that removes a trait from a character.
message RemoveTraitEffect {
  // The target character.
  TargetSelector target = 1;
  // The trait to remove.
  string trait = 2;
}
