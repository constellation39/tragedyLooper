syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/ability.proto";
import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// CharacterConfig defines the configuration for a character in the global character library.
message CharacterConfig {
  // The unique identifier for the character.
  int32 id = 1;
  // The name of the character.
  string name = 2;
  // A list of character traits (e.g., "Student", "Reporter").
  repeated string traits = 3;
  // The paranoia limit for the character.
  int32 paranoia_limit = 4;
  // The goodwill limit for the character.
  int32 goodwill_limit = 5;
  // The intrigue limit for the character.
  int32 intrigue_limit = 6;
  // A list of ability IDs that the character possesses.
  repeated int32 ability_ids = 7;
  // A list of special rules for the character.
  repeated CharacterRule rules = 8;
  // A description of the character.
  string description = 9;
  // The initial location of the character.
  LocationType initial_location = 10;
  // A list of locations that the character cannot go to.
  repeated LocationType blocked_locations = 11;
}

// Character defines a character instance at runtime.
message Character {
  // The configuration for the character.
  CharacterConfig config = 1;
  // The current location of the character.
  LocationType current_location = 2;
  // The current paranoia level of the character.
  int32 paranoia = 3;
  // The current goodwill level of the character.
  int32 goodwill = 4;
  // The current intrigue level of the character.
  int32 intrigue = 5;
  // The hidden role of the character (assigned by the script).
  int32 hidden_role_id = 6;
  // A list of ability instances that the character possesses.
  repeated Ability abilities = 7;
  // Whether the character is alive.
  bool is_alive = 8;
  // Whether the character is in panic mode.
  bool in_panic_mode = 9;
  // A list of dynamic traits for the character.
  repeated string traits = 10;
}

// CharacterConfigLib is a library of character configurations.
message CharacterConfigLib {
  // A map of character configurations, keyed by their ID.
  map<int32, CharacterConfig> characters = 1;
}

// CharacterRule defines a special rule for a character.
message CharacterRule {
  // The name of the rule.
  string name = 1;
  // A description of the rule.
  string description = 2;
  // The trigger for the rule.
  TriggerType trigger = 3;
  // The effect of the rule.
  oneof effect {
    // A turf selection effect.
    TurfSelectionEffect turf_selection_effect = 4;
    // A delayed entry effect.
    DelayedEntryEffect delayed_entry_effect = 5;
    // A special movement rule.
    SpecialMovementRule special_movement_rule = 6;
  }
}

// TurfSelectionEffect defines an effect for selecting a turf.
message TurfSelectionEffect {
  // A list of possible locations to choose from.
  repeated LocationType possible_locations = 1;
  // The prompt to show to the player.
  string prompt = 2;
}

// DelayedEntryEffect defines an effect for a delayed entry.
message DelayedEntryEffect {
  // The day of entry.
  int32 day_of_entry = 1;
  // The location of entry.
  LocationType entry_location = 2;
}

// SpecialMovementRule defines a special movement rule.
message SpecialMovementRule {
  // A list of restricted locations.
  repeated LocationType restricted_locations = 1;
  // A description of the rule.
  string description = 2;
}
