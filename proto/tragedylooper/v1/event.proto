syntax = "proto3";

package tragedylooper.v1;

import "google/protobuf/timestamp.proto";
import "tragedylooper/v1/enums.proto";
import "tragedylooper/v1/card.proto";
import "tragedylooper/v1/incident.proto";
import "tragedylooper/v1/payload.proto";
import "tragedylooper/v1/common.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// GameEvent 表示游戏中发生的事件。
message GameEvent {
  GameEventType type = 1; // 事件类型
  google.protobuf.Timestamp timestamp = 2; // 事件发生的时间戳
  EventPayload payload = 3;
  optional Cause cause = 4; // The cause of the event
}

// Cause defines the source of an event.
message Cause {
  oneof cause_type {
    int32 card_id = 1;
    int32 ability_id = 2;
    int32 incident_id = 3;
    // Could also add GameEngineTick, PlayerChoice, etc.
  }
}

message EventPayload {
  oneof payload {
    CharacterMovedEvent character_moved = 1;
    StatAdjustedEvent stat_adjusted = 2; // Replaces Paranoia, Goodwill, Intrigue events
    LoopLossEvent loop_loss = 5;
    LoopWinEvent loop_win = 6;
    AbilityUsedEvent ability_used = 7;
    DayAdvancedEvent day_advanced = 8;
    CardPlayedEvent card_played = 9;
    CardRevealedEvent card_revealed = 10;
    LoopResetEvent loop_reset = 11;
    GameEndedEvent game_ended = 12;
    ChoiceRequiredEvent choice_required = 13;
    IncidentTriggeredEvent incident_triggered = 14;
    TragedyTriggeredEvent tragedy_triggered = 15;
    TraitAdjustedEvent trait_adjusted = 16; // Replaces TraitAdded, TraitRemoved events
    PlayerActionTakenEvent player_action_taken = 18;
  }
}

// 角色移动事件
message CharacterMovedEvent {
  int32 character_id = 1; // 移动的角色ID
  LocationType new_location = 2; // 移动到的新地点
}

// 属性调整事件 (替代 Paranoia/Goodwill/IntrigueAdjustedEvent)
message StatAdjustedEvent {
  int32 character_id = 1;
  StatType stat_type = 2; // 被改变的属性
  int32 amount = 3;       // 调整量
  int32 new_value = 4;    // 调整后的新值
}

// 特性调整事件 (替代 TraitAdded/RemovedEvent)
message TraitAdjustedEvent {
  int32 character_id = 1;
  string trait = 2;
  bool was_added = 3; // true for added, false for removed
}

// 循环失败事件
message LoopLossEvent {
  int32 incident_id = 1; // 导致失败的事件类型
}

// 循环胜利事件
message LoopWinEvent { }

// 能力使用事件
message AbilityUsedEvent {
  int32 character_id = 1; // 使用能力的角色ID
  string ability_name = 2; // 使用的能力名称
}

// 天数推进事件
message DayAdvancedEvent {
  int32 day = 1; // 新的天数
  int32 loop = 2; // 当前的循环数
}

// 卡牌打出事件
message CardPlayedEvent {
  int32 player_id = 1;
  Card card = 2;
}

// 卡牌揭示事件
message CardRevealedEvent {
  map<int32, CardList> cards = 1; // player_id -> card
}

// 循环重置事件
message LoopResetEvent {
  int32 loop_number = 1; // 新的循环数
}

// 游戏结束事件
message GameEndedEvent {
  PlayerRole winner = 1; // 胜利的玩家角色
  string reason = 2; // 游戏结束原因
}



// 需要玩家做出选择的事件
message ChoiceRequiredEvent {
  string request_id = 1; // A unique ID for this choice request, e.g. "card_22_target"
  int32 player_id = 2; // 需要做选择的玩家
  repeated Choice choices = 3; // 提供给玩家的选项列表
}

// 事件触发事件
message IncidentTriggeredEvent {
  Incident incident = 1; // 被触发的事件详情
}

// 悲剧触发事件
message TragedyTriggeredEvent {
  int32 tragedy_id = 1; // 被触发的悲剧类型
}

message PlayerActionTakenEvent {
  int32 player_id = 1;
  PlayerActionPayload action = 2;
}

