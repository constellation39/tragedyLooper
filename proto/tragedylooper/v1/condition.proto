syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// Condition defines a condition for triggering rules, events, and effects.
message Condition {
  // The type of the condition.
  oneof condition_type {
    // A stat condition.
    StatCondition stat_condition = 1;
    // A location condition.
    LocationCondition location_condition = 2;
    // A role condition.
    RoleCondition role_condition = 3;
    // A trait condition.
    TraitCondition trait_condition = 4;
    // A day condition.
    DayCondition day_condition = 5;
    // A player condition.
    PlayerCondition player_condition = 6;
    // A compound condition (AND/OR/NOT).
    CompoundCondition compound_condition = 7;
  }
}

// CompoundCondition defines a combination of multiple conditions.
message CompoundCondition {
  // The operator to use when combining conditions.
  enum Operator {
    // Unspecified operator.
    OPERATOR_UNSPECIFIED = 0;
    // The logical AND operator.
    OPERATOR_AND = 1;
    // The logical OR operator.
    OPERATOR_OR = 2;
    // The logical NOT operator (applies to the first condition).
    OPERATOR_NOT = 3;
  }
  // The logical operator to use.
  Operator operator = 1;
  // A list of sub-conditions.
  repeated Condition sub_conditions = 2;
}

// StatCondition defines a condition based on a character's stats.
message StatCondition {
  // The target character selector.
  TargetSelector target = 1;
  // The type of stat to check.
  enum StatType {
    // Unspecified stat type.
    STAT_TYPE_UNSPECIFIED = 0;
    // Paranoia stat.
    STAT_TYPE_PARANOIA = 1;
    // Goodwill stat.
    STAT_TYPE_GOODWILL = 2;
    // Intrigue stat.
    STAT_TYPE_INTRIGUE = 3;
  }
  // The type of stat to check.
  StatType stat_type = 2;
  // The comparator to use.
  enum Comparator {
    // Unspecified comparator.
    COMPARATOR_UNSPECIFIED = 0;
    // Greater than.
    COMPARATOR_GREATER_THAN = 1;
    // Less than.
    COMPARATOR_LESS_THAN = 2;
    // Equal to.
    COMPARATOR_EQUAL_TO = 3;
    // Greater than or equal to.
    COMPARATOR_GREATER_THAN_OR_EQUAL = 4;
    // Less than or equal to.
    COMPARATOR_LESS_THAN_OR_EQUAL = 5;
  }
  // The comparator to use.
  Comparator comparator = 3;
  // The value to compare against.
  int32 value = 4;
}

// LocationCondition defines a condition based on a character's location.
message LocationCondition {
  // The target character selector.
  TargetSelector target = 1;
  // The target location.
  LocationType location = 2;
  // Whether the character is at the location (defaults to true).
  bool is_at_location = 3;
  // Whether the character is alone at the location.
  bool is_alone = 4;
  // Whether the character is not alone at the location.
  bool not_alone = 5;
}

// RoleCondition defines a condition based on a character's role.
message RoleCondition {
  // The target character selector.
  TargetSelector target = 1;
  // The target role.
  RoleType role = 2;
  // Whether the character has the role (defaults to true).
  bool has_role = 3;
}

// TraitCondition defines a condition based on a character's traits.
message TraitCondition {
  // The target character selector.
  TargetSelector target = 1;
  // The target trait.
  string trait = 2;
  // Whether the character has the trait (defaults to true).
  bool has_trait = 3;
}

// DayCondition defines a condition based on the current day.
message DayCondition {
  // The comparator to use.
  enum Comparator {
    // Unspecified comparator.
    COMPARATOR_UNSPECIFIED = 0;
    // Before a certain day.
    COMPARATOR_BEFORE = 1;
    // On a certain day.
    COMPARATOR_ON = 2;
    // After a certain day.
    COMPARATOR_AFTER = 3;
  }
  // The comparator to use.
  Comparator comparator = 1;
  // The target day.
  int32 day = 2;
}

// PlayerCondition defines a condition based on a player's state.
message PlayerCondition {
  // The target player role.
  PlayerRole player_role = 1;
  // Extensible: e.g., check if the player has used a certain card.
}

// TargetSelector defines a dynamic target for conditions or effects.
message TargetSelector {
  // The type of the selector.
  enum SelectorType {
    // Unspecified selector type.
    SELECTOR_TYPE_UNSPECIFIED = 0;
    // A specific character.
    SELECTOR_TYPE_SPECIFIC_CHARACTER = 1;
    // The character that triggered the event.
    SELECTOR_TYPE_TRIGGERING_CHARACTER = 2;
    // The culprit of the event.
    SELECTOR_TYPE_CULPRIT = 3;
    // The victim of the event.
    SELECTOR_TYPE_VICTIM = 4;
    // Any character with a specific role.
    SELECTOR_TYPE_ANY_CHARACTER_WITH_ROLE = 5;
    // All characters at a specific location.
    SELECTOR_TYPE_ALL_CHARACTERS_AT_LOCATION = 6;
    // The user of the ability.
    SELECTOR_TYPE_ABILITY_USER = 7;
    // The target of the ability.
    SELECTOR_TYPE_ABILITY_TARGET = 8;
    // All characters.
    SELECTOR_TYPE_ALL_CHARACTERS = 9;
  }
  // The type of the selector.
  SelectorType selector_type = 1;
  // The character ID to use when the type is SPECIFIC_CHARACTER.
  int32 character_id = 2;
  // The role filter to use when the type is ANY_CHARACTER_WITH_ROLE.
  RoleType role_filter = 3;
  // The location filter to use when the type is ALL_CHARACTERS_AT_LOCATION.
  LocationType location_filter = 4;
}
