syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/common.proto";
import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// Condition 定义了触发规则、事件和效果的条件。
// 它使用 oneof 来确保一次只能设置一种类型的条件。
// 对于逻辑否定，请使用带有 NOT 操作符的 CompoundCondition。
message Condition {
  // 条件的类型。
  oneof condition_type {
    // 属性条件。
    StatCondition stat_condition = 1;
    // 位置条件。
    LocationCondition location_condition = 2;
    // 角色条件。
    RoleCondition role_condition = 3;
    // 特征条件。
    TraitCondition trait_condition = 4;
    // 日期条件。
    DayCondition day_condition = 5;
    // 玩家条件。
    PlayerCondition player_condition = 6;
    // 复合条件（AND/OR/NOT）。
    CompoundCondition compound_condition = 7;
    // 阶段条件。
    PhaseCondition phase_condition = 8;
    // 事件历史条件。
    EventHistoryCondition event_history_condition = 9;
    // 地点角色数量条件。
    LocationCharacterCountCondition location_character_count_condition = 11;
  }
}

// EventHistoryCondition 定义了基于过去游戏事件的条件。
message EventHistoryCondition {
  // 要查找的事件类型。
  GameEventType event_type = 1;
  // 回溯天数。0 表示今天，1 表示今天和昨天，依此类推。
  int32 lookback_days = 2;
  // 可选：根据事件中涉及的角色进一步过滤。
  TargetSelector event_target = 3;
  // 事件必须发生的次数。
  int32 count = 4;
  // 计数的比较操作符。
  Comparator comparator = 5;

  // 可选：事件有效载荷的过滤器。
  oneof event_filter {
    StatAdjustedEventFilter stat_adjusted_event_filter = 6;
  }
}

// StatAdjustedEventFilter 为 StatAdjustedEvent 提供过滤器。
message StatAdjustedEventFilter {
  // 可选：要匹配的属性类型。
  optional StatType stat_type = 1;
  // 可选：要比较的金额。
  optional int32 amount = 2;
  // 可选：金额的比较操作符。
  optional Comparator amount_comparator = 3;
}

// PhaseCondition 定义了基于当前游戏阶段的条件。
message PhaseCondition {
  // 要使用的比较操作符。
  Comparator comparator = 1;
  // 目标游戏阶段。
  GamePhase phase = 2;
}

// CompoundCondition 定义了多个条件的组合。
// 对于 NOT，只提供一个子条件。
message CompoundCondition {
  // 组合条件时使用的操作符。
  enum Operator {
    // 未指定的操作符。
    OPERATOR_UNSPECIFIED = 0;
    // 逻辑 AND 操作符。
    OPERATOR_AND = 1;
    // 逻辑 OR 操作符。
    OPERATOR_OR = 2;
    // 逻辑 NOT 操作符。
    OPERATOR_NOT = 3;
  }
  // 要使用的逻辑操作符。
  Operator operator = 1;
  // 子条件列表。
  repeated Condition sub_conditions = 2;
}

// StatCondition 定义了基于角色属性的条件。
message StatCondition {
  // 目标角色选择器。
  TargetSelector target = 1;
  // 要检查的属性类型。
  StatType stat_type = 2;
  // 要使用的比较操作符。
  Comparator comparator = 3;
  // 要比较的值。
  int32 value = 4;
  // 可选：第二个要比较的目标。
  // 如果设置，条件将比较“target”的属性与“target_to_compare”的属性。
  TargetSelector target_to_compare = 5;
}

// LocationCondition 定义了检查角色是否在特定地点的条件。
// 要检查角色是否不在某个地点，请使用带有 NOT 操作符的 CompoundCondition。
message LocationCondition {
  // 目标角色选择器。
  TargetSelector target = 1;
  // 目标地点。
  LocationType location = 2;
}

// LocationCharacterCountCondition 定义了基于地点角色数量的条件。
message LocationCharacterCountCondition {
  // 目标地点。
  LocationType location = 1;
  // 要使用的比较操作符。
  Comparator comparator = 2;
  // 要比较的角色数量。
  int32 count = 3;
}

// RoleCondition 定义了基于角色扮演的条件。
// 要检查角色是否没有某个角色，请使用带有 NOT 操作符的 CompoundCondition。
message RoleCondition {
  // 目标角色选择器。
  TargetSelector target = 1;
  // 要检查的角色。
  int32 role_id = 2;
}

// TraitCondition 定义了基于角色特征的条件。
// 要检查角色是否没有某个特征，请使用带有 NOT 操作符的 CompoundCondition。
message TraitCondition {
  // 目标角色选择器。
  TargetSelector target = 1;
  // 目标特征。
  string trait = 2;
}

// DayCondition 定义了基于当前日期的条件。
message DayCondition {
  // 要使用的比较操作符。
  Comparator comparator = 1;
  // 目标日期。
  int32 day = 2;
}

// PlayerCondition 定义了基于玩家状态的条件。
message PlayerCondition {
  // 目标玩家角色。
  PlayerRole player_role = 1;
  // 可扩展：例如，检查玩家是否使用过某张卡牌。
}

// TargetSelector 定义了条件或效果的动态目标。
// 它使用 oneof 来确保一次只能设置一种类型的选择器。
// 当选择器可能匹配多个角色（例如 all_characters_at_location）时，
// 并且它在评估条件（如 StatCondition）的上下文中使用时，
// 如果任何匹配的角色满足条件，则条件为真。
message TargetSelector {
  oneof selector {
    // 按 ID 指定特定角色。
    int32 specific_character = 1;
    // 触发事件的角色。
    Empty triggering_character = 2;
    // 事件的罪魁祸首。
    Empty culprit = 3;
    // 事件的受害者。
    Empty victim = 4;
    // 具有特定角色的任何角色。
    int32 character_with_role_id = 5;
    // 特定地点所有角色。
    LocationType all_characters_at_location = 6;
    // 动作（卡牌或能力）的使用者。
    Empty action_user = 7;
    // 动作（卡牌或能力）的目标。
    Empty action_target = 8;
    // All characters.
    Empty all_characters = 9;
  }
}
