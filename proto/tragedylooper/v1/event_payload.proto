syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/card.proto";
import "tragedylooper/v1/enums.proto";
import "tragedylooper/v1/incident.proto";
import "tragedylooper/v1/payload.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

message EventPayload {
  oneof payload {
    CharacterMovedEvent character_moved = 1;
    ParanoiaAdjustedEvent paranoia_adjusted = 2;
    GoodwillAdjustedEvent goodwill_adjusted = 3;
    IntrigueAdjustedEvent intrigue_adjusted = 4;
    LoopLossEvent loop_loss = 5;
    LoopWinEvent loop_win = 6;
    AbilityUsedEvent ability_used = 7;
    DayAdvancedEvent day_advanced = 8;
    CardPlayedEvent card_played = 9;
    CardRevealedEvent card_revealed = 10;
    LoopResetEvent loop_reset = 11;
    GameEndedEvent game_ended = 12;
    ChoiceRequiredEvent choice_required = 13;
    IncidentTriggeredEvent incident_triggered = 14;
    TragedyTriggeredEvent tragedy_triggered = 15;
    TraitAddedEvent trait_added = 16;
    TraitRemovedEvent trait_removed = 17;
    PlayerActionTakenEvent player_action_taken = 18;
  }
}

// 角色移动事件
message CharacterMovedEvent {
  int32 character_id = 1; // 移动的角色ID
  LocationType new_location = 2; // 移动到的新地点
}

// 妄想值调整事件
message ParanoiaAdjustedEvent {
  int32 character_id = 1; // 角色ID
  int32 amount = 2; // 调整量
  int32 new_paranoia = 3; // 调整后的新妄想值
}

// 好感值调整事件
message GoodwillAdjustedEvent {
  int32 character_id = 1; // 角色ID
  int32 amount = 2; // 调整量
  int32 new_goodwill = 3; // 调整后的新好感值
}

// 阴谋值调整事件
message IntrigueAdjustedEvent {
  int32 character_id = 1; // 角色ID
  int32 amount = 2; // 调整量
  int32 new_intrigue = 3; // 调整后的新阴谋值
}

// 循环失败事件
message LoopLossEvent {
  int32 incident_id = 1; // 导致失败的事件类型
}

// 循环胜利事件
message LoopWinEvent {}

// 能力使用事件
message AbilityUsedEvent {
  int32 character_id = 1; // 使用能力的角色ID
  string ability_name = 2; // 使用的能力名称
}

// 天数推进事件
message DayAdvancedEvent {
  int32 day = 1; // 新的天数
  int32 loop = 2; // 当前的循环数
}

// 卡牌打出事件
message CardPlayedEvent {
  int32 player_id = 1;
  Card card = 2;
}

// 卡牌揭示事件
message CardRevealedEvent {
  map<int32, CardList> cards = 1; // player_id -> card
}

// 循环重置事件
message LoopResetEvent {
  int32 loop_number = 1; // 新的循环数
}

// 游戏结束事件
message GameEndedEvent {
  PlayerRole winner = 1; // 胜利的玩家角色
  string reason = 2; // 游戏结束原因
}

// Choice 表示玩家可以做出的选择。
message Choice {
  string id = 1; // 唯一ID，例如 "target_char_5" 或 "effect_choice_0"
  string description = 2; // 选项的描述

  oneof choice_type {
    int32 target_character_id = 3; // 用于目标选择
    int32 effect_option_index = 4; // 用于复合效果中的效果选择
  }
}

// 需要玩家做出选择的事件
message ChoiceRequiredEvent {
  // 这可能需要更复杂的结构，具体取决于选择
  repeated Choice choices = 1; // 提供给玩家的选项列表
}

// 事件触发事件
message IncidentTriggeredEvent {
  Incident incident = 1; // 被触发的事件详情
}

// 悲剧触发事件
message TragedyTriggeredEvent {
  int32 tragedy_id = 1; // 被触发的悲剧类型
}

// 特性添加事件
message TraitAddedEvent {
  int32 character_id = 1;
  string trait = 2;
}

// 特性移除事件
message TraitRemovedEvent {
  int32 character_id = 1;
  string trait = 2;
}

message PlayerActionTakenEvent {
  int32 player_id = 1;
  PlayerActionPayload action = 2;
}
