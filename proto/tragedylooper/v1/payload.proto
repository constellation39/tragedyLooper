syntax = "proto3";

package tragedylooper.v1;

import "tragedylooper/v1/enums.proto";

option go_package = "github.com/constellation39/tragedyLooper/pkg/proto/v1";

// 玩家打出卡牌的操作负载
message PlayCardPayload {
  int32 player_id = 1; // 执行操作的玩家ID
  int32 card_id = 2; // 打出的卡牌ID
  oneof target {
    int32 target_character_id = 3; // 卡牌的目标角色ID
    LocationType target_location = 4; // 如果是移动卡，指定目标地点
  }
}

// 玩家使用能力的操作负载
message UseAbilityPayload {
  int32 player_id = 1; // 执行操作的玩家ID
  int32 character_id = 2; // 哪个角色的能力被使用
  int32 ability_id = 3; // 哪个能力被使用
  oneof target {
    int32 target_character_id = 4; // 如果能力有目标角色，指定其ID
    LocationType target_location = 5; // 如果能力有目标地点，指定其地点
    int32 target_incident_id = 6; // 如果能力目标是悲剧，指定其类型
  }
}

// 主角玩家进行猜测的操作负载
message MakeGuessPayload {
  int32 player_id = 1; // 执行操作的玩家ID
  map<int32, int32> guessed_roles = 2; // 猜测的角色身份映射，键为 character_id
}

// 玩家进行选择的操作负载（例如，在需要选择地盘或目标时）
message ChooseOptionPayload {
  int32 player_id = 1; // 执行操作的玩家ID
  int32 character_id = 2; // 做出选择的角色（如果选择与角色相关）
  string chosen_option_id = 3; // 选择项的ID
}

// 玩家跳过回合的操作负载
message PassTurnAction {
  int32 player_id = 1;
}

// 通用的玩家操作负载
message PlayerActionPayload {
  oneof payload {
    PlayCardPayload play_card = 1; // 打出卡牌的负载
    UseAbilityPayload use_ability = 2; // 使用能力的负载
    MakeGuessPayload make_guess = 3; // 进行猜测的负载
    ChooseOptionPayload choose_option = 4; // 进行选择的负载
    PassTurnAction pass_turn = 5; // 玩家跳过
  }
}
